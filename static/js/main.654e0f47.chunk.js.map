{"version":3,"sources":["components/forms/register/RegisteredSuccess.module.css","components/forms/restore-password/CheckEmail.module.css","components/Profile/ProfileInfo.module.css","components/Pagination/PaginationBar.module.css","components/forms/add-new-item-form/AddNewItemForm.module.css","components/CardsList/CardsList.module.css","store/reducers/app/types.ts","store/reducers/auth/types.ts","components/forms/login/LoginForm.tsx","hooks/useAppSelector.ts","store/reducers/packs/types.ts","api/instance.ts","api/authAPI.ts","utils/handleError.ts","store/reducers/auth/auth-action-creators.ts","store/reducers/app/action-creators.ts","api/packsAPI.ts","store/reducers/cards/types.ts","store/reducers/packs/packs-action-creators.ts","api/cardsAPI.ts","router/index.ts","store/reducers/cards/cards-action-creators.ts","store/reducers/action-creators.ts","hooks/useActions.ts","pages/Login.tsx","components/forms/register/RegisteredSuccess.tsx","components/forms/register/RegisterForm.tsx","pages/Register.tsx","components/forms/restore-password/CheckEmail.tsx","components/forms/restore-password/RestorePasswordForm.tsx","pages/RestorePassword.tsx","pages/Error404.tsx","components/forms/set-password/SetPassword.tsx","pages/SetPassword.tsx","components/common/editable-span/EditableSpan.tsx","components/Profile/ProfileInfo.tsx","components/Packs/AsideBar/isMineBlock.tsx","components/Packs/AsideBar/UserInfoBlock.tsx","components/Packs/AsideBar/SliderBlock.tsx","components/Packs/AsideBar/AsideBar.tsx","components/common/select/MySelect.tsx","components/Pagination/PaginationBar.tsx","utils/date.ts","components/forms/edit-item-form/EditItemForm.tsx","components/modals/Modal.tsx","components/Packs/PacksList/PacksTable.tsx","components/forms/add-new-item-form/AddNewItemForm.tsx","components/Search/SearchBar.tsx","hooks/useDebounce.ts","components/Packs/PacksList/PacksList.tsx","pages/Packs.tsx","components/CardsList/CardRating.tsx","components/CardsList/CardTable.tsx","components/CardsList/CardsList.tsx","pages/Learn.tsx","components/AppRouter.tsx","components/common/error-bar/ErrorBar.tsx","components/Navbar/Navbar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/packs/index.ts","store/reducers/app/index.ts","store/reducers/cards/index.ts","store/reducers/index.ts","store/index.ts","styles/theme.tsx","index.tsx","components/forms/register/RegisterForm.module.css","components/Packs/AsideBar/AsideBar.module.css","components/forms/login/LoginForm.module.css","components/forms/restore-password/RestorePassword.module.css","components/forms/set-password/SetPassword.module.css","components/Packs/PacksList/PacksList.module.css","components/Packs/PacksList/PacksTable.module.css","components/modals/Modal.module.css","components/Navbar/Navbar.module.css","components/forms/edit-item-form/EditItemForm.module.css"],"names":["module","exports","AppActionEnum","AuthActionEnum","LoginForm","onSubmitHandler","status","errorDiv","useRef","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","useState","visible","setVisible","Paper","elevation","className","s","paper","form","handleSubmit","FormLabel","formLabel","FormGroup","formGroup","TextField","variant","label","margin","getFieldProps","touched","ref","style","color","type","passwordInput","icon","onClick","top","FormControlLabel","control","Checkbox","Button","button","disabled","signUpBlock","to","useAppSelector","useSelector","PacksActions","instance","axios","create","baseURL","withCredentials","authAPI","post","response","data","payload","delete","from","message","put","handleError","e","dispatch","error","AppActionCreators","setAppError","setAppStatus","AuthActionCreators","setUser","user","SET_USER_DATA","setIsAuth","isAuth","SET_IS_AUTH","setAuthInfo","info","SET_INFO","login","a","logout","authMe","register","restorePassword","updateProfile","name","avatar","updatedUser","setAppIsInitialized","isInitialized","SET_APP_IS_INITIALIZED","SET_APP_STATUS","SET_APP_ERROR","initializeApp","CardsActions","PACKS_URL","packsAPI","queryParams","get","params","cardsPack","id","PacksActionCreators","setPacks","SET_PACKS","setPageCount","SET_PAGE_COUNT","setPage","SET_PAGE","setCardPacksTotalCount","SET_PACKS_TOTAL_COUNT","setIsMine","SET_IS_MINE","setCardsQuantity","SET_CARDS_QUANTITY","fetchPacks","cardPacks","pageCount","cardPacksTotalCount","addPack","updatePack","removePack","RouteNames","CARDS_URL","cardsAPI","card","CardsActionCreators","setCards","SET_CARDS","setCardsPageCount","SET_CARDS_PAGE_COUNT","setCardPage","SET_CARDS_PAGE","setCardsTotalCount","SET_CARDS_TOTAL_COUNT","fetchCards","cards","cardsTotalCount","addCard","updateCard","removeCard","estimateCard","card_id","grade","allActionCreators","useActions","useDispatch","bindActionCreators","Login","state","auth","app","RegisteredSuccess","history","useHistory","useEffect","setTimeout","push","fontSize","RegisterForm","isRegistered","setIsRegistered","confirmPassword","icon1","icon2","buttonBlock","Register","CheckEmail","RestorePasswordForm","isSent","setIsSent","text","RestorePassword","Error404","SetPasswordForm","SetPassword","EditableSpan","React","memo","props","editMode","setEditMode","value","setValue","onChange","currentTarget","autoFocus","onBlur","onDoubleClick","placeholder","ProfileInfo","myPacks","packs","filter","p","user_id","_id","Input","styled","Avatar","theme","width","height","border","palette","background","display","BigAvatar","avatarUrl","setAvatarUrl","profile","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","htmlFor","IconButton","aria-label","component","PhotoCamera","alt","src","newValue","textAlign","IsMineBlock","console","log","isMine","isMineBlock","UserInfoBlock","userInfoBlock","PROFILE","nav","SliderBlock","maxCardsCount","minCardsCount","sliderBlock","Box","sx","Slider","getAriaLabel","event","valueLabelDisplay","min","max","AsideBar","Grid","item","xs","backgroundColor","settings","MySelect","options","defaultValue","map","o","PaginationBar","page","total","handlePageChange","handlePageCountChange","totalPages","Math","ceil","paginationBar","Pagination","count","formatDate","date","year","getFullYear","month","getMonth","day","getDate","EditItemForm","onEditClick","buttonTitle","pack_id","title","setTitle","size","Modal","children","rootClasses","myModal","active","join","myModalContent","stopPropagation","PacksTable","userId","onDeleteClick","modal","setModal","Table","TableHead","tableHead","TableRow","t","TableCell","align","TableBody","pack","scope","PACKS","cardsCount","Date","updated","created","actionCell","noPacksMessage","AddNewItemForm","SearchBar","onSearch","onCreate","setFilter","handleDebouncedSearch","callback","delay","timer","useCallback","args","current","clearTimeout","useDebounce","searchBar","PacksList","packName","getPacks","handleCreatePack","handleDeletePack","handleEditPack","packList","Packs","container","CardRating","Rating","CardTable","question","answer","CardsList","useParams","forEach","handleCreateCard","cardsPack_id","cardList","cardQuestion","cardAnswer","grades","getCard","sum","reduce","acc","rand","random","res","i","newSum","Learn","shots","answerImg","questionImg","questionVideo","answerVideo","rating","more_id","setCard","first","setFirst","isChecked","setIsChecked","find","Card","position","left","transform","flexDirection","alignItems","CardContent","CardMedia","image","Typography","CardActions","padding","marginTop","flexWrap","justifyContent","g","privateRoutes","path","exact","Profile","CARDS","LEARN","publicRoutes","LOGIN","REGISTER","RESTORE","SET_PASSWORD","ERROR","AppRouter","r","ErrorBar","isOpen","Snackbar","open","autoHideDuration","onClose","reason","Alert","severity","Navbar","AppBar","appbar","Toolbar","toolbar","LinearProgress","App","Container","CircularProgress","initialState","authReducer","action","initState","packsReducer","appReducer","maxGrade","minGrade","packUserId","cardsReducer","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createTheme","primary","main","typography","fontFamily","shape","borderRadius","overrides","MuiContainer","root","overflowY","MuiButton","textTransform","MuiTextField","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.654e0f47.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"RegisteredSuccess_paper__2UFwJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"CheckEmail_paper__31ZgR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__2kpDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBar\":\"PaginationBar_paginationBar__2ezqk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddNewItemForm_form__31JIw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardList\":\"CardsList_cardList__HIrCA\"};","type RequestStatusType = 'idle' | 'loading' | 'succeed' | 'failed';\r\n\r\ninterface AppState {\r\n    isInitialized: boolean;\r\n    status: RequestStatusType;\r\n    error: string;\r\n}\r\n\r\nexport enum AppActionEnum {\r\n    SET_APP_IS_INITIALIZED = 'SET_APP_IS_INITIALIZED',\r\n    SET_APP_STATUS = 'SET_APP_STATUS',\r\n    SET_APP_ERROR = 'SET_APP_ERROR',\r\n}\r\n\r\ninterface SetAppIsInitialized {\r\n    type: AppActionEnum.SET_APP_IS_INITIALIZED;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetAppStatus {\r\n    type: AppActionEnum.SET_APP_STATUS;\r\n    payload: RequestStatusType;\r\n}\r\n\r\ninterface SetAppError {\r\n    type: AppActionEnum.SET_APP_ERROR;\r\n    payload: string;\r\n}\r\n\r\ntype AppAction =\r\n    | SetAppIsInitialized\r\n    | SetAppStatus\r\n    | SetAppError\r\n\r\nexport type {\r\n    AppAction,\r\n    AppState,\r\n    SetAppError,\r\n    SetAppStatus,\r\n    SetAppIsInitialized,\r\n    RequestStatusType\r\n}\r\n","import {IUser} from '../../../models/IUser';\r\n\r\ninterface PingResponse {\r\n    ping: number;\r\n    backTime: number;\r\n    frontTime: string;\r\n    info: string;\r\n}\r\n\r\ntype AuthMeResponse = IUser\r\ntype LoginResponse = IUser\r\n\r\ninterface RegisterResponse {\r\n    addedUser: {\r\n        _id: string;\r\n        email: string;\r\n        rememberMe: boolean;\r\n        isAdmin: boolean;\r\n        name: string;\r\n        verified: boolean;\r\n        publicCardPacksCount: number;\r\n        created: Date;\r\n        updated: Date;\r\n        __v: number;\r\n    }\r\n}\r\n\r\ninterface RestoreResponse {\r\n    info: string;\r\n    success: boolean;\r\n    answer: boolean;\r\n    html: boolean;\r\n}\r\n\r\ninterface UpdateProfileResponse {\r\n    updatedUser: IUser;\r\n    token: string;\r\n    tokenDeathTime: number;\r\n}\r\n\r\ninterface AuthState {\r\n    user: IUser,\r\n    isAuth: boolean,\r\n    info: string,\r\n}\r\n\r\nexport enum AuthActionEnum {\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n    SET_IS_AUTH = 'SET_IS_AUTH',\r\n    SET_INFO = 'SET_INFO',\r\n}\r\n\r\ninterface SetUserData {\r\n    type: AuthActionEnum.SET_USER_DATA;\r\n    payload: IUser\r\n}\r\n\r\ninterface SetIsAuth {\r\n    type: AuthActionEnum.SET_IS_AUTH;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetAuthInfo {\r\n    type: AuthActionEnum.SET_INFO;\r\n    payload: string\r\n}\r\n\r\ninterface LoginPayload {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n}\r\n\r\ninterface RegisterPayload {\r\n    email: string,\r\n    password: string,\r\n}\r\n\r\ntype AuthAction =\r\n    | SetUserData\r\n    | SetIsAuth\r\n    | SetAuthInfo\r\n\r\nexport type {\r\n    AuthState,\r\n    AuthAction,\r\n    SetUserData,\r\n    SetIsAuth,\r\n    SetAuthInfo,\r\n    LoginPayload,\r\n    RegisterPayload,\r\n    PingResponse,\r\n    AuthMeResponse,\r\n    LoginResponse,\r\n    RegisterResponse,\r\n    RestoreResponse,\r\n    UpdateProfileResponse,\r\n}\r\n","import React, {useRef, useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Button, Checkbox, FormControlLabel, FormGroup, FormLabel, Paper, TextField} from '@material-ui/core';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport s from './LoginForm.module.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {LoginPayload} from '../../../store/reducers/auth/types';\r\nimport {RequestStatusType} from '../../../store/reducers/app/types';\r\n\r\ntype LoginPropsType = {\r\n    onSubmitHandler: (values: LoginPayload) => void\r\n    status: RequestStatusType\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\nconst LoginForm: React.FC<LoginPropsType> = ({onSubmitHandler, status}) => {\r\n    const errorDiv = useRef(null);\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'panich2303@gmail.com',\r\n            password: '12345678',\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Should be more than 7 characters'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            onSubmitHandler(values);\r\n        },\r\n    });\r\n    const [visible, setVisible] = useState<boolean>(false);\r\n\r\n    return (\r\n        <Paper elevation={3} className={s.paper}>\r\n            <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                <FormLabel>\r\n                    <h1 className={s.formLabel}>Log In</h1>\r\n                </FormLabel>\r\n                <FormGroup className={s.formGroup}>\r\n                    <TextField\r\n                        variant={'standard'}\r\n                        label='Email'\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email &&\r\n                    formik.errors.email ? <div ref={errorDiv} style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        variant={'standard'}\r\n                        type={visible ? 'text' : 'password'}\r\n                        label='Password'\r\n                        margin='normal'\r\n                        className={s.passwordInput}\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {\r\n                        formik.values.password.length > 0\r\n                        && <VisibilityIcon className={s.icon}\r\n                                           onClick={() => setVisible(!visible)}\r\n                                           color={visible ? 'primary' : 'inherit'}\r\n                                           style={formik.errors.password\r\n                                               ? ({top: '40%'})\r\n                                               : ({top: '43%'})\r\n                                           }\r\n                        />\r\n                    }\r\n                    {formik.touched.password &&\r\n                    formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={\r\n                            <Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                color='primary'\r\n                            />\r\n                        }\r\n                    />\r\n                </FormGroup>\r\n                <Button\r\n                    type={'submit'}\r\n                    variant={'contained'}\r\n                    color={'primary'}\r\n                    className={s.button}\r\n                    disabled={status === 'loading'}\r\n                >\r\n                    Sign In</Button>\r\n                <div className={s.signUpBlock}>\r\n                    <span>Don't have an account? <Link to='/register'>Sign Up!</Link></span>\r\n                    <Link to='/restore'>Forgot Password?</Link>\r\n                </div>\r\n            </form>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport {\r\n    LoginForm\r\n}\r\n","import {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../store/reducers';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import {IPack} from '../../../models/IPack';\r\n\r\ninterface PacksState {\r\n    packs: IPack[];\r\n    cardPacksTotalCount: number;\r\n    maxCardsCount: number;\r\n    minCardsCount: number;\r\n    page: number;\r\n    pageCount: number;\r\n    filter: string;\r\n    isMine: boolean;\r\n}\r\n\r\ninterface GetPacksResponse {\r\n    cardPacks: IPack[];\r\n    page: number;\r\n    pageCount: number;\r\n    minCardsCount: number;\r\n    maxCardsCount: number;\r\n    cardPacksTotalCount: number;\r\n}\r\n\r\ninterface GetPacksQueryParams {\r\n    packName?: string;\r\n    min?: number;\r\n    max?: number;\r\n    page?: number;\r\n    pageCount?: number;\r\n    user_id?: string;\r\n    sortPacks?: string;\r\n}\r\n\r\ninterface PackPayload {\r\n    _id?: string;\r\n    name?: string;\r\n    path?: string;\r\n    private?: boolean;\r\n    type?: string;\r\n    grade?: number;\r\n    shots?: number;\r\n    rating?: number;\r\n    deckCover?: string;\r\n}\r\n\r\nexport enum PacksActions {\r\n    SET_PACKS = 'SET_PACKS',\r\n    SET_PAGE_COUNT = 'SET_PAGE_COUNT',\r\n    SET_PAGE = 'SET_PAGE',\r\n    SET_PACKS_TOTAL_COUNT = 'SET_PACKS_TOTAL_COUNT',\r\n    FILTER_PACKS = 'FILTER_PACKS',\r\n    SET_IS_MINE = 'SET_IS_MINE',\r\n    SET_CARDS_QUANTITY = 'SET_CARDS_QUANTITY'\r\n\r\n}\r\n\r\ninterface SetPacks {\r\n    type: PacksActions.SET_PACKS;\r\n    payload: IPack[];\r\n}\r\n\r\ninterface SetPageCount {\r\n    type: PacksActions.SET_PAGE_COUNT;\r\n    payload: number;\r\n}\r\n\r\ninterface SetPage {\r\n    type: PacksActions.SET_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface SetPacksTotalCount {\r\n    type: PacksActions.SET_PACKS_TOTAL_COUNT;\r\n    payload: number;\r\n}\r\n\r\ninterface SetIsMine {\r\n    type: PacksActions.SET_IS_MINE;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetCardsQuantity {\r\n    type: PacksActions.SET_CARDS_QUANTITY;\r\n    payload: {\r\n        min: number;\r\n        max: number;\r\n    };\r\n}\r\n\r\n\r\ntype PacksAction =\r\n    | SetPacks\r\n    | SetPageCount\r\n    | SetPage\r\n    | SetPacksTotalCount\r\n    | SetIsMine\r\n    | SetCardsQuantity\r\n\r\nexport type {\r\n    PacksState,\r\n    GetPacksResponse,\r\n    GetPacksQueryParams,\r\n    PackPayload,\r\n    SetPacks,\r\n    SetPageCount,\r\n    SetPage,\r\n    SetPacksTotalCount,\r\n    PacksAction,\r\n    SetIsMine,\r\n    SetCardsQuantity\r\n}\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n});\r\n\r\nexport {\r\n    instance\r\n};\r\n","import {instance} from './instance';\r\nimport {\r\n    AuthMeResponse,\r\n    LoginPayload,\r\n    LoginResponse,\r\n    PingResponse,\r\n    RegisterPayload,\r\n    RegisterResponse, RestoreResponse, UpdateProfileResponse\r\n} from '../store/reducers/auth/types';\r\nconst from = 'pvlchkhrv@gmail.com';\r\nconst message = `<div>password recover link: <a href='https://neko-back.herokuapp.com/2.0/set-new-password/$token$'>Link</a></div>`;\r\n\r\nexport const authAPI = {\r\n    async ping() {\r\n        const response = await instance.get<PingResponse>(`/ping/?frontTime=${Date.now()}`);\r\n        return response.data;\r\n    },\r\n    async authMe() {\r\n        const response = await instance.post<AuthMeResponse>('auth/me', {});\r\n        return response.data;\r\n    },\r\n    async login(payload: LoginPayload) {\r\n        const response = await instance.post<LoginResponse>('auth/login', payload);\r\n        return response.data\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me', {});\r\n    },\r\n    async register(payload: RegisterPayload) {\r\n        const response = await instance.post<RegisterResponse>(`auth/register`, payload);\r\n        return response.data;\r\n    },\r\n    async restorePassword(payload: { email: string }) {\r\n        const response = await instance.post<RestoreResponse>('/auth/forgot', {...payload, from, message});\r\n        return response.data;\r\n    },\r\n    setNewPassword(payload: { password: string, resetPasswordToken: string }) {\r\n        return instance.post<ResponseType>('auth/new-password', payload);\r\n    },\r\n    updateProfile(payload: { name?: string, avatar?: string }) {\r\n        return instance.put<UpdateProfileResponse>('auth/me', payload);\r\n    }\r\n};\r\n","import {AppActionCreators} from '../store/reducers/app/action-creators';\r\nimport {AppDispatch} from '../store';\r\n\r\nexport const handleError = (e: any) => (dispatch: AppDispatch)=> {\r\n    const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n    dispatch(AppActionCreators.setAppError(error));\r\n    dispatch(AppActionCreators.setAppStatus('failed'))\r\n}\r\n","import {IUser} from '../../../models/IUser';\r\nimport {AuthActionEnum, LoginPayload, SetAuthInfo, SetIsAuth, SetUserData} from './types';\r\nimport {AppDispatch} from '../../index';\r\nimport {authAPI} from '../../../api/authAPI';\r\nimport {AppActionCreators} from '../app/action-creators';\r\nimport {handleError} from '../../../utils/handleError';\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser): SetUserData => ({type: AuthActionEnum.SET_USER_DATA, payload: user}),\r\n    setIsAuth: (isAuth: boolean): SetIsAuth => ({type: AuthActionEnum.SET_IS_AUTH, payload: isAuth}),\r\n    setAuthInfo: (info: string): SetAuthInfo => ({type: AuthActionEnum.SET_INFO, payload: info}),\r\n    login: (payload: LoginPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const user = await authAPI.login(payload);\r\n            // localStorage.setItem('user', JSON.stringify(user));\r\n            dispatch(AuthActionCreators.setUser(user));\r\n            dispatch(AuthActionCreators.setIsAuth(true));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AppActionCreators.setAppStatus('loading'));\r\n            await authAPI.logout();\r\n            // localStorage.removeItem('auth');\r\n            // localStorage.removeItem('user');\r\n            dispatch(AuthActionCreators.setUser({} as IUser));\r\n            dispatch(AuthActionCreators.setIsAuth(false));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            return handleError(e);\r\n        }\r\n    },\r\n    authMe: () => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const user = await authAPI.authMe();\r\n            dispatch(AuthActionCreators.setUser(user));\r\n            dispatch(AuthActionCreators.setIsAuth(true));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    register: (email: string, password: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await authAPI.register({email, password});\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    restorePassword: (email: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const data = await authAPI.restorePassword({email});\r\n            dispatch(AuthActionCreators.setAuthInfo(data.info));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    updateProfile: (name?: string, avatar?: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const response = await authAPI.updateProfile({name, avatar});\r\n            dispatch(AuthActionCreators.setUser(response.data.updatedUser));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    }\r\n};\r\n","import {AppActionEnum, RequestStatusType, SetAppError, SetAppIsInitialized, SetAppStatus} from './types';\r\nimport {AppDispatch} from '../../index';\r\nimport {AuthActionCreators} from '../auth/auth-action-creators';\r\nimport {authAPI} from '../../../api/authAPI';\r\n\r\nexport const AppActionCreators = {\r\n    setAppIsInitialized: (isInitialized: boolean): SetAppIsInitialized => ({\r\n        type: AppActionEnum.SET_APP_IS_INITIALIZED,\r\n        payload: isInitialized\r\n    }),\r\n    setAppStatus: (status: RequestStatusType): SetAppStatus => ({type: AppActionEnum.SET_APP_STATUS, payload: status}),\r\n    setAppError: (error: string): SetAppError => ({type: AppActionEnum.SET_APP_ERROR, payload: error}),\r\n    initializeApp: () => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const user = await authAPI.authMe();\r\n            if (user) {\r\n                dispatch(AuthActionCreators.setUser(user));\r\n                dispatch(AppActionCreators.setAppIsInitialized(true));\r\n                dispatch(AuthActionCreators.setIsAuth(true));\r\n                dispatch(AppActionCreators.setAppStatus('succeed'));\r\n            } else {\r\n                dispatch(AppActionCreators.setAppIsInitialized(true));\r\n                dispatch(AppActionCreators.setAppStatus('succeed'));\r\n            }\r\n         } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppIsInitialized(true));\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    }\r\n}\r\n","import {instance} from './instance'\r\nimport {GetPacksQueryParams, GetPacksResponse, PackPayload} from '../store/reducers/packs/types';\r\n\r\nconst PACKS_URL = 'cards/pack/';\r\n\r\nconst packsAPI = {\r\n    async getPacks(queryParams: GetPacksQueryParams) {\r\n        const response = await instance.get<GetPacksResponse>(PACKS_URL, {params: queryParams});\r\n        return response.data;\r\n    },\r\n    addPack(payload: PackPayload) {\r\n        return instance.post(PACKS_URL, {cardsPack: payload});\r\n    },\r\n    removePack(id: string) {\r\n        return instance.delete(PACKS_URL, {params: {id}});\r\n    },\r\n    updatePack(payload: PackPayload) {\r\n        return instance.put(PACKS_URL, {cardsPack: payload});\r\n    },\r\n};\r\n\r\nexport {\r\n    packsAPI,\r\n    PACKS_URL\r\n};\r\n","import {ICard} from '../../../models/ICard';\r\n\r\n\r\ninterface CardsState {\r\n    cards: ICard[];\r\n    cardsTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    packUserId: string; // id юзера, создавшего колоду\r\n}\r\n\r\ninterface GetCardsQueryParams {\r\n    cardAnswer?: string;\r\n    cardQuestion?: string;\r\n    min?: number;\r\n    max?: number;\r\n    cardsPack_id: string;\r\n    pageCount?: number;\r\n    page?: number;\r\n    sortCards?: string;\r\n}\r\n\r\ninterface CardPayload {\r\n    cardsPack_id: string;\r\n    question?: string;\r\n    answer?: string;\r\n    grade?: number | null;\r\n    shots?: number;\r\n    rating?: number;\r\n    answerImg?: string;\r\n    questionImg?: string;\r\n    questionVideo?: string;\r\n    answerVideo?: string;\r\n    type?: string;\r\n}\r\n\r\nexport enum CardsActions {\r\n    SET_CARDS = 'SET_CARDS',\r\n    SET_CARDS_PAGE_COUNT = 'SET_CARDS_PAGE_COUNT',\r\n    SET_CARDS_PAGE = 'SET_CARDS_PAGE',\r\n    SET_CARDS_TOTAL_COUNT = 'SET_CARDS_TOTAL_COUNT',\r\n}\r\n\r\ninterface SetCards {\r\n    type: CardsActions.SET_CARDS;\r\n    payload: ICard[];\r\n}\r\n\r\ninterface SetCardsPageCount {\r\n    type: CardsActions.SET_CARDS_PAGE_COUNT;\r\n    payload: number;\r\n}\r\n\r\ninterface SetCardsPage {\r\n    type: CardsActions.SET_CARDS_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface SetCardsTotalCount {\r\n    type: CardsActions.SET_CARDS_TOTAL_COUNT;\r\n    payload: number;\r\n}\r\n\r\ntype CardsAction =\r\n    | SetCards\r\n    | SetCardsPage\r\n    | SetCardsPageCount\r\n    | SetCardsTotalCount\r\n\r\nexport type {\r\n    CardsState,\r\n    GetCardsQueryParams,\r\n    CardPayload,\r\n    CardsAction,\r\n    SetCards,\r\n    SetCardsPage,\r\n    SetCardsPageCount,\r\n    SetCardsTotalCount\r\n};\r\n","import {IPack} from '../../../models/IPack';\r\nimport {\r\n    GetPacksQueryParams,\r\n    PackPayload,\r\n    PacksActions, SetCardsQuantity,\r\n    SetIsMine,\r\n    SetPacks,\r\n    SetPacksTotalCount,\r\n    SetPage,\r\n    SetPageCount\r\n} from './types';\r\nimport {AppDispatch} from '../../index';\r\nimport {AppActionCreators} from '../app/action-creators';\r\nimport {packsAPI} from '../../../api/packsAPI';\r\n\r\nexport const PacksActionCreators = {\r\n    setPacks: (payload: IPack[]): SetPacks => ({type: PacksActions.SET_PACKS, payload}),\r\n    setPageCount: (payload: number): SetPageCount => ({type: PacksActions.SET_PAGE_COUNT, payload}),\r\n    setPage: (payload: number): SetPage => ({type: PacksActions.SET_PAGE, payload}),\r\n    setCardPacksTotalCount: (payload: number): SetPacksTotalCount => ({\r\n        type: PacksActions.SET_PACKS_TOTAL_COUNT,\r\n        payload\r\n    }),\r\n    setIsMine: (payload: boolean): SetIsMine => ({type: PacksActions.SET_IS_MINE, payload}),\r\n    setCardsQuantity: (payload: { min: number, max: number }): SetCardsQuantity => ({\r\n        type: PacksActions.SET_CARDS_QUANTITY,\r\n        payload\r\n    }),\r\n    fetchPacks: (payload: GetPacksQueryParams) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const data = await packsAPI.getPacks(payload);\r\n            dispatch(PacksActionCreators.setPacks(data.cardPacks));\r\n            dispatch(PacksActionCreators.setPageCount(data.pageCount));\r\n            dispatch(PacksActionCreators.setCardPacksTotalCount(data.cardPacksTotalCount));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    addPack: (payload: PackPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await packsAPI.addPack(payload);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    updatePack: (payload: PackPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await packsAPI.updatePack(payload);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    removePack: (id: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await packsAPI.removePack(id);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n}\r\n","import {instance} from './instance'\r\nimport {CardPayload, CardsState, GetCardsQueryParams} from '../store/reducers/cards/types';\r\n\r\nconst CARDS_URL = 'cards/card';\r\n\r\nconst cardsAPI = {\r\n    async getCards(queryParams: GetCardsQueryParams) {\r\n        const response = await instance.get<CardsState>(CARDS_URL, {params: queryParams});\r\n        return response.data;\r\n    },\r\n    addCard(payload: CardPayload) {\r\n        return instance.post(CARDS_URL, {card: payload});\r\n    },\r\n    removeCard(id: string) {\r\n        return instance.delete(CARDS_URL, {params: {id}});\r\n    },\r\n    updateCard(payload: CardPayload) {\r\n        return instance.put(CARDS_URL, {card: payload});\r\n    },\r\n    estimateCard(payload: {grade: number | null, card_id: string}) {\r\n        return instance.put('cards/grade', payload)\r\n    }\r\n};\r\n\r\nexport {\r\n    cardsAPI,\r\n    CARDS_URL\r\n};\r\n","import Login from '../pages/Login'\r\nimport Register from '../pages/Register';\r\nimport RestorePassword from '../pages/RestorePassword';\r\nimport Error404 from '../pages/Error404';\r\nimport SetPassword from '../pages/SetPassword';\r\nimport Profile from '../components/Profile/ProfileInfo';\r\nimport Packs from '../pages/Packs';\r\nimport CardsList from '../components/CardsList/CardsList';\r\nimport {ComponentType} from 'react';\r\nimport Learn from '../pages/Learn';\r\n\r\ninterface IRoute {\r\n    path: string;\r\n    component: ComponentType;\r\n    exact?: boolean;\r\n}\r\n\r\nexport enum RouteNames {\r\n    PACKS = '/packs',\r\n    CARDS = '/packs/:id',\r\n    PROFILE = '/profile',\r\n    LOGIN = '/login',\r\n    REGISTER = '/register',\r\n    RESTORE = '/restore',\r\n    SET_PASSWORD = '/set-password',\r\n    ERROR = '/error',\r\n    LEARN = '/learn/:id'\r\n}\r\n\r\nconst privateRoutes: IRoute[] = [\r\n    {path: RouteNames.PACKS, exact: true, component: Packs},\r\n    {path: RouteNames.PROFILE, exact: true, component: Profile},\r\n    {path: RouteNames.CARDS, exact: true, component: CardsList},\r\n    {path: RouteNames.LEARN, exact: true, component: Learn},\r\n];\r\n\r\nconst publicRoutes: IRoute[] = [\r\n    {path: RouteNames.LOGIN, exact: true, component: Login},\r\n    {path: RouteNames.REGISTER, exact: true, component: Register},\r\n    {path: RouteNames.RESTORE, exact: true, component: RestorePassword},\r\n    {path: RouteNames.SET_PASSWORD, exact: true, component: SetPassword},\r\n    {path: RouteNames.ERROR, exact: false, component: Error404},\r\n];\r\n\r\nexport {\r\n    publicRoutes,\r\n    privateRoutes\r\n}\r\n","\r\nimport {AppActionCreators} from '../app/action-creators';\r\nimport {AppDispatch} from '../../index';\r\nimport {\r\n    CardPayload,\r\n    CardsActions,\r\n    GetCardsQueryParams,\r\n    SetCards,\r\n    SetCardsPage,\r\n    SetCardsPageCount,\r\n    SetCardsTotalCount\r\n} from './types';\r\nimport {cardsAPI} from '../../../api/cardsAPI';\r\nimport {ICard} from '../../../models/ICard';\r\n\r\nexport const CardsActionCreators = {\r\n    setCards: (payload: ICard[]): SetCards => ({type: CardsActions.SET_CARDS, payload}),\r\n    setCardsPageCount: (payload: number): SetCardsPageCount => ({type: CardsActions.SET_CARDS_PAGE_COUNT, payload}),\r\n    setCardPage: (payload: number): SetCardsPage => ({type: CardsActions.SET_CARDS_PAGE, payload}),\r\n    setCardsTotalCount: (payload: number): SetCardsTotalCount => ({type: CardsActions.SET_CARDS_TOTAL_COUNT, payload}),\r\n    fetchCards: (payload: GetCardsQueryParams) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const data = await cardsAPI.getCards(payload);\r\n            dispatch(CardsActionCreators.setCards(data.cards));\r\n            dispatch(CardsActionCreators.setCardsPageCount(data.pageCount));\r\n            dispatch(CardsActionCreators.setCardsTotalCount(data.cardsTotalCount));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    addCard: (payload: CardPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await cardsAPI.addCard(payload);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    updateCard: (payload: CardPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await cardsAPI.updateCard(payload);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    removeCard: (id: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await cardsAPI.removeCard(id);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    estimateCard: (card_id: string, grade: number | null) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await cardsAPI.estimateCard({card_id, grade});\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    }\r\n}\r\n","import {AppActionCreators} from './app/action-creators';\r\nimport {AuthActionCreators} from './auth/auth-action-creators';\r\nimport {PacksActionCreators} from './packs/packs-action-creators';\r\nimport {CardsActionCreators} from './cards/cards-action-creators';\r\n\r\nexport const allActionCreators = {\r\n    ...AppActionCreators,\r\n    ...AuthActionCreators,\r\n    ...PacksActionCreators,\r\n    ...CardsActionCreators\r\n};\r\n","import {AppDispatch} from '../store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {allActionCreators} from '../store/reducers/action-creators';\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(allActionCreators, dispatch);\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {LoginForm} from '../components/forms/login/LoginForm';\r\nimport {LoginPayload} from '../store/reducers/auth/types';\r\nimport {useAppSelector} from '../hooks/useAppSelector';\r\nimport {useActions} from '../hooks/useActions';\r\n\r\n\r\nconst Login = () => {\r\n    const {user} = useAppSelector(state => state.auth);\r\n    const {status} = useAppSelector(state => state.app);\r\n    const {login, authMe} = useActions()\r\n    const onSubmitHandler = (payload: LoginPayload) => {\r\n        login(payload);\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     authMe();\r\n    // }, []);\r\n\r\n    // if (Object.keys(user).length !== 0) {\r\n    //     return <Redirect to={RouteNames.PACKS}/>\r\n    // }\r\n\r\n    return (\r\n        <LoginForm onSubmitHandler={onSubmitHandler}\r\n                   status={status}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, {useEffect} from 'react';\r\nimport {Paper} from '@material-ui/core';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport s from './RegisteredSuccess.module.css';\r\nimport {useHistory} from 'react-router';\r\n\r\nconst RegisteredSuccess: React.FC<{}> = () => {\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        setTimeout(() => history.push('/login'), 2000)\r\n    }, [])\r\n\r\n    return (\r\n            <Paper elevation={3} className={s.paper}>\r\n                <LockOpenIcon fontSize='large'/>\r\n                <h3>You've been successfully registered</h3>\r\n                <p>Please Sign In on the Login Page</p>\r\n            </Paper>\r\n    );\r\n};\r\n\r\nexport default RegisteredSuccess;\r\n","import React, {useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Button, FormGroup, FormLabel, Paper, TextField} from '@material-ui/core';\r\nimport s from './RegisterForm.module.css'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport {useHistory} from 'react-router';\r\nimport {useActions} from '../../../hooks/useActions';\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport RegisteredSuccess from './RegisteredSuccess';\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    confirmPassword?: string;\r\n}\r\n\r\nconst RegisterForm: React.FC = () => {\r\n    const [isRegistered, setIsRegistered] = useState<boolean>(false)\r\n    const history = useHistory();\r\n    const {register} = useActions();\r\n    const {status} = useAppSelector(state => state.app);\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'panich2303@gmail.com',\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required!';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be more than 7 characters'\r\n            }\r\n\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Required!';\r\n            } else if (values.confirmPassword.length < 8) {\r\n                errors.confirmPassword = 'Must be more than 7 characters'\r\n            } else if (values.confirmPassword !== values.password) {\r\n                errors.confirmPassword = 'Does not match the above'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            setIsRegistered(true);\r\n            register(values.email, values.password);\r\n        },\r\n    });\r\n\r\n    if (isRegistered) {\r\n        return <RegisteredSuccess/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Paper className={s.paper} elevation={3}>\r\n                <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                    <FormLabel>\r\n                        <h1 className={s.formLabel}>Sign Up</h1>\r\n                    </FormLabel>\r\n                    <FormGroup className={s.formGroup}>\r\n                        <TextField\r\n                            variant={'standard'}\r\n                            label='Email'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            variant={'standard'}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <TextField\r\n                            variant={'standard'}\r\n                            type='password'\r\n                            label='Confirm password'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n                        {formik.touched.confirmPassword &&\r\n                        formik.errors.confirmPassword ?\r\n                            <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div> : null}\r\n                        <VisibilityIcon className={s.icon1}/>\r\n                        <VisibilityIcon className={s.icon2}/>\r\n                        <div className={s.buttonBlock}>\r\n                            <Button\r\n                                onClick={() => history.push('/login')}\r\n                                color={'secondary'}\r\n                                className={s.button}\r\n                                variant={'contained'}\r\n                            >\r\n                                Cancel</Button>\r\n                            <Button\r\n                                type={'submit'}\r\n                                color={'primary'}\r\n                                variant={'contained'}\r\n                                className={s.button}\r\n                                disabled={status === 'loading'}\r\n                            >\r\n                                Sign Up</Button>\r\n                        </div>\r\n                    </FormGroup>\r\n                </form>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    RegisterForm\r\n}\r\n","import React from 'react';\r\nimport {RegisterForm} from '../components/forms/register/RegisterForm';\r\n\r\n\r\nconst Register = () => {\r\n    return (\r\n        <div>\r\n            <RegisterForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import React, {useEffect} from 'react';\r\nimport {Paper} from '@material-ui/core';\r\nimport DraftsTwoToneIcon from '@material-ui/icons/DraftsTwoTone';\r\nimport s from './CheckEmail.module.css';\r\nimport {useHistory} from 'react-router';\r\n\r\ntype CheckEmailPropsType = {\r\n    info: string | null\r\n}\r\n\r\nconst CheckEmail: React.FC<CheckEmailPropsType> = ({info}) => {\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        setTimeout(() => history.push('/login'), 3000)\r\n    }, [])\r\n\r\n    return (\r\n            <Paper elevation={3} className={s.paper}>\r\n                <DraftsTwoToneIcon fontSize='large'/>\r\n                <h3>{info}</h3>\r\n                <p>Check you email</p>\r\n            </Paper>\r\n    );\r\n};\r\n\r\nexport default CheckEmail;\r\n","import React, {useState} from 'react'\r\nimport {useFormik} from 'formik'\r\nimport {Button, FormGroup, FormLabel, Paper, TextField} from '@material-ui/core'\r\nimport s from './RestorePassword.module.css'\r\nimport CheckEmail from './CheckEmail'\r\nimport {useHistory} from 'react-router'\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport {useActions} from '../../../hooks/useActions';\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n}\r\n\r\nconst RestorePasswordForm: React.FC = () => {\r\n    const info = useAppSelector(state => state.auth.info);\r\n    const status = useAppSelector(state => state.app.status);\r\n    const [isSent, setIsSent] = useState<boolean>(false);\r\n    const {restorePassword} = useActions();\r\n    const history = useHistory();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            setIsSent(true);\r\n            restorePassword(values.email);\r\n        },\r\n    });\r\n\r\n    if (isSent) {\r\n        return <CheckEmail info={info}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper className={s.paper} elevation={3}>\r\n                <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                    <FormLabel>\r\n                        <h2 className={s.formLabel}>Forgot your password?</h2>\r\n                    </FormLabel>\r\n                    <FormGroup className={s.formGroup}>\r\n                        <TextField\r\n                            variant='standard'\r\n                            label='Email'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <p className={s.text}>Enter your email address and we will send you further instructions</p>\r\n                        <Button\r\n                            type='submit'\r\n                            variant='contained'\r\n                            color='primary'\r\n                            className={s.button}\r\n                            disabled={status === 'loading'}\r\n                        >\r\n                            Send my password</Button>\r\n                        <Button\r\n                            onClick={() => history.push('/login')}\r\n                            variant='contained'\r\n                            color='secondary'\r\n                            className={s.button}>\r\n                            Cancel</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    RestorePasswordForm\r\n}\r\n","import React from 'react';\r\nimport {RestorePasswordForm} from '../components/forms/restore-password/RestorePasswordForm';\r\n\r\nconst RestorePassword = () => {\r\n    return (\r\n        <RestorePasswordForm />\r\n    );\r\n};\r\n\r\nexport default RestorePassword;\r\n","import React from 'react';\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <div>\r\n            <h1 style={{ color: 'red', fontSize: 25 }}>Error occurred! You are trying to load a not existing page</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Error404;\r\n","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Button, FormGroup, FormLabel, Paper, TextField} from '@material-ui/core';\r\nimport s from './SetPassword.module.css';\r\n\r\ntype FormikErrorType = {\r\n    password?: string;\r\n}\r\n\r\nconst SetPasswordForm: React.FC = () => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: 'panich2303@gmail.com',\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required!';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be more than 7 characters'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            ;\r\n        },\r\n    });\r\n    return (\r\n        <Paper className={s.paper} elevation={3}>\r\n            <FormLabel>\r\n                <h3 style={{color: '#2D2E46'}}>Create New Password</h3>\r\n            </FormLabel>\r\n            <FormGroup className={s.formGroup}>\r\n                <TextField\r\n                    variant={'standard'}\r\n                    label='New password'\r\n                    type='password'\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.touched.password &&\r\n                formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                <TextField\r\n                    variant={'standard'}\r\n                    label='Confirm password'\r\n                    type='password'\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.touched.password &&\r\n                formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                <p className={s.text}>Create new password and we will send you further instructions to email</p>\r\n                <div className={s.buttonBlock}>\r\n                    <Button\r\n                        onClick={() => {\r\n                        }}\r\n                        type={'submit'}\r\n                        variant={'contained'}\r\n                        color={'secondary'}\r\n                        className={s.button}>\r\n                        Cancel</Button>\r\n                    <Button\r\n                        type={'submit'}\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        className={s.button}\r\n                        onClick={() => {\r\n                        }}>\r\n                        Change password</Button>\r\n                </div>\r\n            </FormGroup>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport {\r\n    SetPasswordForm\r\n}\r\n","import React from 'react';\r\nimport {SetPasswordForm} from '../components/forms/set-password/SetPassword';\r\n\r\nconst SetPassword = () => {\r\n    return (\r\n        <div>\r\n            <SetPasswordForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SetPassword;\r\n","import React from 'react';\r\nimport {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    // onBlur: (name: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [value, setValue] = useState(props.value);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        // setValue(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(value);\r\n    }\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={value} onChange={changeValue} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode} placeholder={'Type here please'}>\r\n            <CreateIcon fontSize={'small'}/>\r\n            {props.value}\r\n        </span>\r\n});\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {Avatar, Badge, Box, IconButton, Input, Paper, styled} from '@material-ui/core';\r\nimport s from './ProfileInfo.module.css';\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport {EditableSpan} from '../common/editable-span/EditableSpan';\r\nimport {useActions} from '../../hooks/useActions';\r\nimport {PhotoCamera} from '@material-ui/icons';\r\n\r\nconst ProfileInfo = () => {\r\n    const user = useAppSelector(state => state.auth.user);\r\n    const packs = useAppSelector(state => state.packs.packs);\r\n    const myPacks = packs.filter(p => p.user_id === user._id);\r\n    const {updateProfile} = useActions();\r\n    const SmallAvatar = styled(Avatar)(({ theme }) => ({\r\n        width: 22,\r\n        height: 22,\r\n        border: `2px solid ${theme.palette.background.paper}`,\r\n    }));\r\n    const Input = styled('input')({\r\n        display: 'none',\r\n    });\r\n    const BigAvatar = styled(Avatar)(({theme}) => ({\r\n        width: 200,\r\n        height: 200\r\n    }));\r\n    const [avatarUrl, setAvatarUrl]  = useState<string>('');\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAvatarUrl(e.currentTarget.value);\r\n        updateProfile(avatarUrl);\r\n    }\r\n    return (\r\n        <Paper className={s.profile}>\r\n            <h3>Personal Information</h3>\r\n            <Badge\r\n                overlap=\"circular\"\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                badgeContent={\r\n                    <label htmlFor=\"icon-button-file\">\r\n                        <Input id=\"icon-button-file\" type=\"file\" onChange={onChangeHandler}/>\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                            <PhotoCamera />\r\n                        </IconButton>\r\n                    </label>\r\n                }\r\n            >\r\n                <BigAvatar alt=\"profile avatar\" src={user.avatar}/>\r\n            </Badge>\r\n            <EditableSpan value={user.name} onChange={(newValue: string) => updateProfile(newValue)}/>\r\n            <div>\r\n                <div style={{height: 50, textAlign: 'center', background:'bisque'}}>\r\n                    <LayersIcon/> My Packs: {myPacks.length}\r\n                </div>\r\n            </div>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React, {FC} from 'react';\r\nimport s from './AsideBar.module.css';\r\nimport {Button} from '@material-ui/core';\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport {useActions} from '../../../hooks/useActions';\r\n\r\nconst IsMineBlock = () => {\r\n    console.log('IS MINE BLOCK')\r\n    const status = useAppSelector(state => state.app.status);\r\n    const isMine = useAppSelector(state => state.packs.isMine);\r\n    const {setIsMine} = useActions();\r\n\r\n    return (\r\n        <div className={s.isMineBlock}>\r\n            {\r\n                isMine\r\n                    ? <Button\r\n                        color='primary'\r\n                        variant='contained'\r\n                        disabled={status === 'loading'}\r\n                        onClick={() => setIsMine(false)}\r\n                    >All Packs</Button>\r\n                    : <Button\r\n                              variant='contained'\r\n                              color='primary'\r\n                              disabled={status === 'loading'}\r\n                              onClick={() => setIsMine(true)}\r\n                    >My Packs</Button>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IsMineBlock;\r\n","import React from 'react';\r\nimport s from './AsideBar.module.css';\r\nimport {Avatar, Button, styled} from '@material-ui/core';\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport {RouteNames} from '../../../router';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst UserInfoBlock = () => {\r\n    console.log('USER INFO BLOCK');\r\n    const user = useAppSelector(state => state.auth.user);\r\n    const BigAvatar = styled(Avatar)(({theme}) => ({\r\n        width: 200,\r\n        height: 200\r\n    }))\r\n\r\n    return (\r\n        <div className={s.userInfoBlock}>\r\n            <BigAvatar alt=\"profile avatar\" src={'user.avatar'}/>\r\n            <div>\r\n                {user.name}\r\n            </div>\r\n            <div>\r\n                <NavLink to={RouteNames.PROFILE} className={s.nav}>\r\n                    <Button variant='contained'>Edit Profile</Button>\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserInfoBlock;\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './AsideBar.module.css';\r\nimport {Box, Button, Slider} from '@material-ui/core';\r\nimport {useActions} from '../../../hooks/useActions';\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\n\r\nconst SliderBlock = () => {\r\n    const {setCardsQuantity} = useActions();\r\n    const status = useAppSelector(state => state.app.status);\r\n    const {maxCardsCount, minCardsCount} = useAppSelector(state => state.packs);\r\n    const [value, setValue] = React.useState<number[]>([minCardsCount, maxCardsCount]);\r\n    const handleChange = (event: ChangeEvent<{}>, newValue: number | number[]) => {\r\n        setValue(newValue as number[]);\r\n    }\r\n\r\n    return (\r\n        <div className={s.sliderBlock}>\r\n            <h5>Number Of Cards</h5>\r\n            <Box sx={{width: 200}}>\r\n                <Slider\r\n                    getAriaLabel={() => 'CardsList quantity range'}\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    valueLabelDisplay='auto'\r\n                />\r\n                <Button variant='contained'\r\n                        color='primary'\r\n                        onClick={() => setCardsQuantity({min: value[0], max: value[1]})}\r\n                        disabled={status === 'loading'}\r\n                >Set</Button>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SliderBlock;\r\n","import React, {FC} from 'react';\r\nimport {Grid} from '@material-ui/core';\r\nimport s from './AsideBar.module.css';\r\nimport IsMineBlock from './isMineBlock';\r\nimport UserInfoBlock from './UserInfoBlock';\r\nimport SliderBlock from './SliderBlock';\r\n\r\nexport const AsideBar: FC = () => {\r\n    console.log('ASIDE BAR')\r\n    return (\r\n        <Grid item xs={3} style={{backgroundColor: '#ECECF9'}}>\r\n            <div className={s.settings}>\r\n                <UserInfoBlock/>\r\n                <IsMineBlock/>\r\n                <SliderBlock/>\r\n            </div>\r\n        </Grid>\r\n    );\r\n};\r\n","import React, {ChangeEvent, DetailedHTMLProps, FC, SelectHTMLAttributes} from 'react';\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\r\n\r\ntype MySelectPropsType = DefaultSelectPropsType & {\r\n    options: Array<{ value: string, name: string }>;\r\n    onChange: (event: ChangeEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nconst MySelect: FC<MySelectPropsType> = ({options, defaultValue, value, onChange}, ...restProps) => {\r\n\r\n    return (\r\n        <select value={value}\r\n                onChange={onChange}\r\n        >\r\n            <option disabled value=''>{defaultValue}</option>\r\n            {\r\n                options.map(o => <option value={o.value} key={o.value}>\r\n                    {o.name}\r\n                </option>)\r\n            }\r\n        </select>\r\n    );\r\n};\r\n\r\nexport default MySelect;\r\n","import React, {ChangeEvent} from 'react'\r\nimport {Pagination} from '@material-ui/lab'\r\nimport MySelect from '../common/select/MySelect'\r\nimport s from './PaginationBar.module.css'\r\nimport {RequestStatusType} from '../../store/reducers/app/types';\r\n\r\ntype PaginationBarPropsType = {\r\n    page?: number\r\n    pageCount: number\r\n    total: number\r\n    handlePageChange: (e: React.ChangeEvent<unknown>, value: number) => void\r\n    handlePageCountChange: (e: ChangeEvent<HTMLSelectElement>) => void\r\n    status: RequestStatusType\r\n}\r\n\r\nconst PaginationBar: React.FC<PaginationBarPropsType> = ({\r\n                                                             page,\r\n                                                             pageCount,\r\n                                                             total,\r\n                                                             handlePageChange,\r\n                                                             handlePageCountChange,\r\n                                                             status\r\n                                                         }) => {\r\n    const options = [\r\n        {value: '10', name: '10'},\r\n        {value: '15', name: '15'},\r\n        {value: '20', name: '20'},\r\n    ]\r\n    const totalPages = Math.ceil(total / pageCount)\r\n    return (\r\n        <div className={s.paginationBar}>\r\n            <Pagination count={totalPages}\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        page={page}\r\n                        onChange={handlePageChange}\r\n                        disabled={status === 'loading'}\r\n            />\r\n            <MySelect options={options}\r\n                      defaultValue='Packs on page'\r\n                      onChange={handlePageCountChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PaginationBar;\r\n","export const formatDate = (date: Date): string => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() < 9 ? `0${date.getMonth() + 1}`: date.getMonth() + 1;\r\n    const day = date.getDate() < 10 ? `0${date.getDate() + 1}`: date.getDate();\r\n    return `${day}.${month}.${year}`;\r\n};\r\n","import React, {useState} from 'react'\r\nimport {Button, TextField} from '@material-ui/core'\r\nimport s from './EditItemForm.module.css'\r\nimport {PackPayload} from '../../../store/reducers/packs/types';\r\n\r\ntype AddItemPropsType = {\r\n    onEditClick: (payload: PackPayload) => void\r\n    setVisible: (visible: boolean) => void\r\n    buttonTitle: string\r\n    pack_id: string\r\n    name: string\r\n}\r\n\r\nconst EditItemForm: React.FC<AddItemPropsType> = ({onEditClick, buttonTitle, setVisible, name, pack_id}) => {\r\n    const [title, setTitle] = useState<string>(() => name);\r\n    return (\r\n        <form className={s.form}>\r\n            <TextField onChange={e => setTitle(e.currentTarget.value)}\r\n                       value={title}\r\n                       label='New Title...'\r\n            />\r\n            <Button onClick={() => {\r\n                onEditClick({name: title, _id: pack_id})\r\n                setVisible(false)\r\n            }}\r\n                    color='primary'\r\n                    variant='contained'\r\n                    size='medium'\r\n                    className={s.button}\r\n                    disabled={title.length < 1}\r\n            >{buttonTitle}</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\n    export default EditItemForm;\r\n","import React, {FC} from 'react';\r\nimport s from './Modal.module.css'\r\ntype MyModalPropsType = {\r\n    visible: boolean;\r\n    setVisible: (visible: boolean) => void;\r\n}\r\n\r\nconst Modal: FC<MyModalPropsType> = ({children, visible, setVisible}) => {\r\n    const rootClasses = [s.myModal];\r\n    if (visible) {\r\n        rootClasses.push(s.active)\r\n    }\r\n\r\n    return (\r\n        <div className={rootClasses.join(' ')} onClick={() => setVisible(false)}>\r\n            <div className={s.myModalContent} onClick={event => {\r\n                event.stopPropagation()\r\n            }}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import {Button, ButtonGroup, Table, TableBody, TableCell, TableHead, TableRow} from '@material-ui/core'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './PacksTable.module.css'\r\nimport {useHistory} from 'react-router';\r\nimport {IPack} from '../../../models/IPack';\r\nimport {PackPayload} from '../../../store/reducers/packs/types';\r\nimport {FC, useState} from 'react';\r\nimport {formatDate} from '../../../utils/date';\r\nimport EditItemForm from '../../forms/edit-item-form/EditItemForm';\r\nimport {RouteNames} from '../../../router';\r\nimport Modal from '../../modals/Modal';\r\n\r\ntype PackTablePropsType = {\r\n    packs: IPack[];\r\n    userId?: string;\r\n    onDeleteClick: (id: string) => void;\r\n    onEditClick: (payload: PackPayload) => void;\r\n}\r\n\r\nexport const PacksTable: FC<PackTablePropsType> = ({\r\n                                                       packs,\r\n                                                       userId,\r\n                                                       onDeleteClick,\r\n                                                       onEditClick,\r\n                                                   }) => {\r\n    const columnTitles = [\r\n        {id: 1, title: 'Pack name'},\r\n        {id: 2, title: 'Cards'},\r\n        {id: 3, title: \"Last updated\"},\r\n        {id: 4, title: \"Created\"},\r\n        {id: 5, title: \"Actions\"}\r\n    ]\r\n    const [modal, setModal] = useState<boolean>(false);\r\n    const history = useHistory();\r\n    return (\r\n        !packs.length ?\r\n            <div className={s.noPacksMessage}>No packs has been found...</div>\r\n            :\r\n            <Table>\r\n                <TableHead className={s.tableHead}>\r\n                    <TableRow>\r\n                        {columnTitles.map(t => {\r\n                            if (t.title === 'Pack name') {\r\n                                return <TableCell key={t.id}>{t.title}</TableCell>\r\n                            }\r\n                            return <TableCell key={t.id} align='center'>{t.title}</TableCell>\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {packs.map((pack) => (\r\n                        <TableRow key={pack._id}>\r\n                            <TableCell component='th' scope='row'>\r\n                                <NavLink to={RouteNames.PACKS + `/${pack._id}`}\r\n                                >{pack.name}</NavLink>\r\n                            </TableCell>\r\n                            <TableCell align='center'>{pack.cardsCount}</TableCell>\r\n                            <TableCell align='center'>{formatDate(new Date(pack.updated))}</TableCell>\r\n                            <TableCell align='center'>{formatDate(new Date(pack.created))}</TableCell>\r\n                            {\r\n                                userId === pack.user_id\r\n                                    ? <TableCell align='center' className={s.actionCell}>\r\n                                        <Button onClick={() => setModal(true)}>Edit</Button>\r\n                                        <Button onClick={() => history.push('/learn/' + pack._id)}\r\n                                        >Learn</Button>\r\n                                        <Modal visible={modal} setVisible={setModal}>\r\n                                            <EditItemForm onEditClick={onEditClick}\r\n                                                          buttonTitle='Update pack'\r\n                                                          setVisible={setModal}\r\n                                                          pack_id={pack._id}\r\n                                                          name={pack.name}\r\n                                            />\r\n                                        </Modal>\r\n                                        <Button onClick={() => onDeleteClick(pack._id)}\r\n                                                color='secondary'\r\n                                        >Delete</Button>\r\n                                    </TableCell>\r\n                                    :\r\n                                    <TableCell align='center' className={s.actionCell}>\r\n                                        <Button onClick={() => history.push('/learn/' + pack._id)}>Learn</Button>\r\n                                    </TableCell>\r\n\r\n                            }\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Button, TextField} from '@material-ui/core'\r\nimport s from './AddNewItemForm.module.css'\r\n\r\ntype AddItemPropsType = {\r\n    onClick: (title: string) => void\r\n    setVisible: (visible: boolean) => void\r\n    buttonTitle: string\r\n}\r\n\r\nconst AddNewItemForm: React.FC<AddItemPropsType> = ({onClick, buttonTitle, setVisible}) => {\r\n    const [title, setTitle] = useState<string>('');\r\n    return (\r\n        <form className={s.form}>\r\n            <TextField onChange={event => setTitle(event.currentTarget.value)}\r\n                       placeholder='Title'\r\n                       value={title}\r\n            />\r\n            <Button onClick={() => {\r\n                onClick(title)\r\n                setVisible(false)\r\n                setTitle('')\r\n            }}\r\n                    color='primary'\r\n                    variant='contained'\r\n                    disabled={title.length < 1}\r\n            >{buttonTitle}</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\n    export default AddNewItemForm;\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport s from '../Packs/PacksList/PacksList.module.css';\r\nimport {Button, TextField} from '@material-ui/core';\r\nimport Modal from '../modals/Modal';\r\nimport AddNewItemForm from '../forms/add-new-item-form/AddNewItemForm';\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport {Search} from '@material-ui/icons';\r\nimport {useDebounce} from '../../hooks/useDebounce';\r\n\r\n// type SearchProps = {\r\n//     filter: string;\r\n//     onSearchClick: () => void;\r\n//     handleSearch: (e: ChangeEvent<HTMLInputElement>) => void;\r\n//     handleCreatePack: (title: string) => void;\r\n// }\r\n\r\ntype SearchProps = {\r\n    type: 'cards' | 'packs';\r\n    filter: string;\r\n    setFilter: (filter: string) => void;\r\n    onSearch: () => void;\r\n    onCreate: (title: string) => void;\r\n}\r\n\r\n\r\nexport const SearchBar: FC<SearchProps> = ({\r\n                                               type,\r\n                                               onSearch,\r\n                                               onCreate,\r\n                                               filter,\r\n                                               setFilter\r\n                                           }) => {\r\n    const [visible, setVisible] = useState<boolean>(false);\r\n    const handleDebouncedSearch = useDebounce(onSearch, 1000);\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setFilter(e.currentTarget.value);\r\n        handleDebouncedSearch();\r\n    };\r\n\r\n    const status = useAppSelector(state => state.app.status);\r\n    return (\r\n        <div className={s.searchBar}>\r\n            <div>\r\n                <TextField id='standard-search'\r\n                           label={type === 'packs'\r\n                               ? 'Pack title...'\r\n                               : 'Question or Answer ...'\r\n                           }\r\n                           type='search'\r\n                           size='small'\r\n                           value={filter}\r\n                           onChange={onChange}\r\n                />\r\n            </div>\r\n            <Button color='primary'\r\n                    onClick={() => setVisible(true)}\r\n                    disabled={status === 'loading'}\r\n            >{type === 'packs' ? 'Create Pack' : 'Create Card'}</Button>\r\n            <Modal visible={visible}\r\n                   setVisible={setVisible}\r\n            >\r\n                <AddNewItemForm buttonTitle={type === 'packs'\r\n                    ? 'Add pack'\r\n                    : 'Add card'}\r\n                                onClick={onCreate}\r\n                                setVisible={setVisible}\r\n                />\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import {useCallback, useRef} from 'react';\r\nexport const useDebounce = (callback: (...args: any[]) => void, delay: number) => {\r\n    const timer = useRef<ReturnType<typeof setTimeout>>();\r\n\r\n    const debouncedCallback = useCallback((...args) => {\r\n        if(timer.current) {\r\n            clearTimeout(timer.current);\r\n        }\r\n        timer.current = setTimeout(() => {\r\n            callback(...args);\r\n        }, delay);\r\n    }, [callback, delay]);\r\n    return debouncedCallback;\r\n}\r\n","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\nimport {Grid} from '@material-ui/core'\r\nimport s from './PacksList.module.css'\r\nimport PaginationBar from '../../Pagination/PaginationBar'\r\nimport {PackPayload} from '../../../store/reducers/packs/types';\r\nimport {PacksTable} from './PacksTable';\r\nimport SearchBar from '../../Search/SearchBar';\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport {useActions} from '../../../hooks/useActions';\r\nimport {Redirect} from 'react-router';\r\nimport {RouteNames} from '../../../router';\r\n\r\nexport const PacksList: FC = () => {\r\n    console.log('PACK LIST')\r\n    const [filter, setFilter] = useState<string>('');\r\n\r\n    const {packs, cardPacksTotalCount, page, pageCount, maxCardsCount, minCardsCount, isMine} =\r\n        useAppSelector(state => state.packs);\r\n    const queryParams = {page, pageCount,  min: minCardsCount, max: maxCardsCount, isMine, packName: filter};\r\n    const status = useAppSelector(state => state.app.status);\r\n    const {user,isAuth} = useAppSelector(state => state.auth);\r\n    const {fetchPacks, setPage, setPageCount, addPack, removePack, updatePack} = useActions();\r\n\r\n    const getPacks = () => {\r\n        if (isMine && user._id) {\r\n            fetchPacks({user_id: user._id, ...queryParams});\r\n        } else {\r\n            fetchPacks(queryParams);\r\n        }\r\n    };\r\n    const handlePageChange = (e: React.ChangeEvent<unknown>, value: number) => setPage(value);\r\n    const handlePageCountChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setPageCount(+e.currentTarget.value);\r\n    };\r\n    const handleOnSearch = () => getPacks();\r\n    const handleCreatePack = async (title: string) => {\r\n        await addPack({name: title});\r\n        getPacks();\r\n    };\r\n    const handleDeletePack = async (id: string) => {\r\n        await removePack(id);\r\n        getPacks();\r\n    };\r\n    const handleEditPack = async (payload: PackPayload) => {\r\n        await updatePack({name: payload.name, _id: payload._id})\r\n        getPacks();\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPacks();\r\n    }, [page, isMine, pageCount, maxCardsCount, minCardsCount]);\r\n\r\n    return (\r\n        <Grid item xs={9} className={s.packList}>\r\n            <h3>Packs List ({cardPacksTotalCount})</h3>\r\n            <SearchBar\r\n                type='packs'\r\n                onSearch={handleOnSearch}\r\n                onCreate={handleCreatePack}\r\n                filter={filter}\r\n                setFilter={setFilter}\r\n            />\r\n            <PacksTable packs={packs}\r\n                        userId={user?._id}\r\n                        onDeleteClick={handleDeletePack}\r\n                        onEditClick={handleEditPack}\r\n            />\r\n            {\r\n                packs.length > 0 && <PaginationBar page={queryParams.page}\r\n                                               pageCount={queryParams.pageCount}\r\n                                               total={cardPacksTotalCount}\r\n                                               handlePageChange={handlePageChange}\r\n                                               handlePageCountChange={handlePageCountChange}\r\n                                               status={status}\r\n                />\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {AsideBar} from '../components/Packs/AsideBar/AsideBar';\r\nimport {PacksList} from '../components/Packs/PacksList/PacksList';\r\n\r\nconst Packs = () => {\r\n    console.log(\"PACKS\");\r\n    return (\r\n        <Paper className='packs'>\r\n            <Grid container>\r\n                <AsideBar/>\r\n                <PacksList />\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Packs;\r\n","import React, {FC, useState} from 'react';\r\nimport {Rating} from '@material-ui/lab';\r\nimport {useActions} from '../../hooks/useActions';\r\nimport {ICard} from '../../models/ICard';\r\n\r\ntype RatingProps = {\r\n    card: ICard;\r\n}\r\nconst CardRating: FC<RatingProps> = ({card}) => {\r\n    console.log(\"RATING\")\r\n    const [value, setValue] = useState<number| null>(card.grade);\r\n    const {estimateCard} = useActions();\r\n    return (\r\n        <Rating\r\n            name='card grade'\r\n            value={card.grade}\r\n            onChange={(event, newValue) => {\r\n                setValue(newValue);\r\n                estimateCard(card._id, value);\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default CardRating;\r\n","import React, {FC} from 'react';\r\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from '@material-ui/core';\r\nimport s from '../Packs/PacksList/PacksList.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {RouteNames} from '../../router';\r\nimport {formatDate} from '../../utils/date';\r\nimport {ICard} from '../../models/ICard';\r\nimport CardRating from './CardRating';\r\n\r\ntype CardTablePropsType = {\r\n    cards: ICard[]\r\n}\r\n\r\nconst CardTable: FC<CardTablePropsType> = ({cards}) => {\r\n    console.log(\"CARDS TABLE\")\r\n    const columnTitles = [\r\n        {id: 1, title: 'Question'},\r\n        {id: 2, title: 'Answer'},\r\n        {id: 3, title: \"Last updated\"},\r\n        {id: 4, title: \"Grade\"},\r\n        {id: 5, title: \"Actions\"}\r\n    ]\r\n    return (\r\n            <Table aria-label='card table'>\r\n                <TableHead className={s.tableHead} style={{backgroundColor: '#ECECF9'}}>\r\n                    <TableRow>\r\n                        {columnTitles.map(t => {\r\n                            return <TableCell key={t.id} align='center'>{t.title}</TableCell>\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {cards.map(card => (\r\n                        <TableRow key={card._id}>\r\n                            <TableCell align='center' width={300}>{card.question}</TableCell>\r\n                            <TableCell align='center' width={300}>{card.answer}</TableCell>\r\n                            <TableCell align='center' >{formatDate (new Date(card.updated))}</TableCell>\r\n                            <TableCell align='center' width={100}>\r\n                                <CardRating card={card}/>\r\n                            </TableCell>\r\n                            <TableCell align='center' width={150}>\r\n                                    <Button onClick={() => {}}>Edit</Button>\r\n                                    <Button onClick={() => {}}\r\n                                            color='secondary'\r\n                                    >Delete</Button>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n    );\r\n};\r\n\r\nexport default CardTable;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Paper} from '@material-ui/core';\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport {useActions} from '../../hooks/useActions';\r\nimport {useParams} from 'react-router';\r\nimport CardTable from './CardTable';\r\nimport SearchBar from '../Search/SearchBar';\r\nimport s from './CardsList.module.css';\r\nimport PaginationBar from '../Pagination/PaginationBar';\r\n\r\nconst CardsList = () => {\r\n    const [filter, setFilter] = useState<string>('');\r\n    const {cardsTotalCount, cards, page, pageCount} = useAppSelector(state => state.cards);\r\n    const packs = useAppSelector(state => state.packs.packs);\r\n    const status = useAppSelector(state => state.app.status);\r\n    const {fetchCards, addCard, setCardPage, setCardsPageCount} = useActions();\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    let packName;\r\n    packs.forEach(p => {\r\n        if (p._id === id) {\r\n            packName = p.name\r\n        }\r\n    })\r\n\r\n    const handleOnSearch = () => {\r\n        fetchCards({cardsPack_id: id, cardQuestion: filter, cardAnswer: filter});\r\n    };\r\n    const handleCreateCard = async (title: string) => {\r\n        await addCard({cardsPack_id: id});\r\n        fetchCards({cardsPack_id: id});\r\n    };\r\n    const handlePageCountChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setCardsPageCount(+e.currentTarget.value);\r\n    };\r\n\r\n    const handlePageChange = (e: React.ChangeEvent<unknown>, value: number) => setCardPage(value);\r\n    useEffect(() => {\r\n        fetchCards({cardsPack_id: id, page, pageCount});\r\n    }, [page, pageCount]);\r\n\r\n    return (\r\n        <Paper className={s.cardList}>\r\n            <h3>\r\n                {`${packName} (${cardsTotalCount})`}\r\n            </h3>\r\n            <SearchBar onSearch={handleOnSearch}\r\n                       type='cards'\r\n                       onCreate={handleCreateCard}\r\n                       filter={filter}\r\n                       setFilter={setFilter}\r\n            />\r\n            <CardTable cards={cards}/>\r\n            <PaginationBar pageCount={pageCount}\r\n                           total={cardsTotalCount}\r\n                           handlePageChange={handlePageChange}\r\n                           handlePageCountChange={handlePageCountChange}\r\n                           status={status}/>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default CardsList;\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Card, CardActions, CardContent, CardMedia, Paper, Typography} from '@material-ui/core';\r\nimport {ICard} from '../models/ICard';\r\nimport {useAppSelector} from '../hooks/useAppSelector';\r\nimport {useHistory, useParams} from 'react-router';\r\nimport {useActions} from '../hooks/useActions';\r\nimport {RouteNames} from '../router';\r\nconst grades = ['Didn`t know', 'Forgot', 'Too much thinking', 'Confused', 'Got it'];\r\n\r\nconst getCard = (cards: ICard[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n    return cards[res.id + 1];\r\n};\r\n\r\nconst Learn: FC = () => {\r\n    const [card, setCard] = useState<ICard>({\r\n        _id: 'fake',\r\n        cardsPack_id: '',\r\n\r\n        answer: 'answer fake',\r\n        question: 'question fake',\r\n        grade: 0,\r\n        shots: 0,\r\n        answerImg: 'url or base 64',\r\n        questionImg: 'url or base 64',\r\n        questionVideo: 'url or base 64',\r\n        answerVideo: 'url or base 64',\r\n        type: '',\r\n        rating: 0,\r\n        more_id: '',\r\n\r\n        created: '',\r\n        updated: '',\r\n    });\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    const [isChecked, setIsChecked] = useState<boolean>(false);\r\n    const {cards} = useAppSelector(state => state.cards);\r\n    const {id} = useParams<{ id: string }>();\r\n    const {fetchCards} = useActions();\r\n    const {packs} = useAppSelector(state => state.packs);\r\n    const pack = packs.find(p => p._id === id)\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            fetchCards({cardsPack_id: id});\r\n            setFirst(false);\r\n        }\r\n\r\n        if (cards.length > 0) setCard(getCard(cards));\r\n    }, [id, cards, first]);\r\n\r\n    const onNext = () => {\r\n        setIsChecked(false);\r\n\r\n        if (cards.length > 0) {\r\n            setCard(getCard(cards));\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translateX(-50%) translateY(-50%)',\r\n            width: '450px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        }}>\r\n            <div style={{display: 'flex'}}>\r\n                <Button onClick={() => history.push(RouteNames.PACKS)}\r\n                >Back</Button>\r\n                <h3>You are learning {pack?.name}</h3>\r\n            </div>\r\n            <CardContent>\r\n                {\r\n                    card.questionImg && <CardMedia\r\n                        component='img'\r\n                        height='194'\r\n                        image={card.questionImg}\r\n                        alt='Question image'\r\n                    />\r\n                }\r\n                <Typography variant='body2'>\r\n                    {card.question}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <div>\r\n                    <Button onClick={() => setIsChecked(true)}>check</Button>\r\n                </div>\r\n            </CardActions>\r\n            {isChecked && (\r\n                <>\r\n                    <Paper style={{margin: 10, padding:10}}>\r\n                        {\r\n                            card.answerImg && <CardMedia\r\n                                component='img'\r\n                                height='194'\r\n                                image={card.answerImg}\r\n                                alt='Answer image'\r\n                            />\r\n                        }\r\n                        {card.answer}\r\n                    </Paper>\r\n                    <div style={{\r\n                        marginTop: 10,\r\n                        display: 'flex',\r\n                        flexWrap: 'wrap',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        {grades.map((g, i) => (\r\n                            <div style={{margin: 5}}>\r\n                                <Button variant='outlined'\r\n                                        key={'grade-' + i}\r\n                                        onClick={() => {\r\n                                        }}>{g}</Button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div style={{margin: 20}}><Button\r\n                        color='primary'\r\n                        variant='contained'\r\n                        onClick={onNext}\r\n                    >next</Button></div>\r\n                </>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Learn;\r\n\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router';\r\nimport {privateRoutes, publicRoutes, RouteNames} from '../router';\r\nimport {useAppSelector} from '../hooks/useAppSelector';\r\n\r\nconst AppRouter = () => {\r\n    const {isAuth} = useAppSelector(state => state.auth);\r\n    return (\r\n        !isAuth ?\r\n            <Switch>\r\n                {publicRoutes.map(r =>\r\n                    <Route path={r.path}\r\n                           component={r.component}\r\n                           exact={r.exact}\r\n                           key={r.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.LOGIN}/>\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                {privateRoutes.map(r =>\r\n                    <Route path={r.path}\r\n                           component={r.component}\r\n                           exact={r.exact}\r\n                           key={r.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.PACKS}/>\r\n            </Switch>\r\n    )\r\n}\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport {Alert} from '@material-ui/lab';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Snackbar} from '@material-ui/core';\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport {useActions} from '../../../hooks/useActions';\r\n\r\nconst ErrorBar = () => {\r\n    const dispatch = useDispatch();\r\n    const error = useAppSelector<string | null>(state => state.app.error);\r\n    const {setAppError} = useActions();\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError(''));\r\n    }\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert variant='outlined' severity='error'>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\nexport default ErrorBar\r\n","import {AppBar, Button, LinearProgress, Toolbar, Typography} from '@material-ui/core';\r\nimport React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport {useActions} from '../../hooks/useActions';\r\n\r\nconst Navbar = () => {\r\n    console.log('NAVBAR')\r\n    const isAuth = useAppSelector(state => state.auth.isAuth);\r\n    const status = useAppSelector(state => state.app.status);\r\n    const {logout} = useActions();\r\n    return (\r\n        <>\r\n            <AppBar position='static' className={s.appbar}>\r\n                <Toolbar className={s.toolbar}>\r\n                    <Typography variant='h6' className={s.text}>\r\n                        Learn whatever you need using spaced-repetition technique...\r\n                    </Typography>\r\n                    {\r\n                        isAuth &&\r\n                        <Button color='inherit'\r\n                                onClick={() => logout()}\r\n                                disabled={status === 'loading'}\r\n                        >Sign Out</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, {useEffect} from 'react';\nimport AppRouter from './components/AppRouter';\nimport './styles/App.css';\nimport {CircularProgress, Container} from '@material-ui/core';\nimport ErrorBar from './components/common/error-bar/ErrorBar';\nimport Navbar from './components/Navbar/Navbar';\nimport {useAppSelector} from './hooks/useAppSelector';\nimport {useActions} from './hooks/useActions';\n\nconst App = () => {\n    console.log('APP')\n    const error = useAppSelector(state => state.app.error)\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\n    const {initializeApp} = useActions();\n\n    useEffect(() => {\n        initializeApp();\n    }, []);\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className='app'>\n            <Navbar/>\n            <Container className='container'>\n                <AppRouter/>\n                {error && <ErrorBar/>}\n            </Container>\n        </div>\n    );\n};\n\nexport default App\n","import {AuthAction, AuthActionEnum, AuthState} from './types';\r\nimport {IUser} from '../../../models/IUser';\r\n\r\nconst initialState: AuthState = {\r\n    user: {} as IUser,\r\n    isAuth: false,\r\n    info: '',\r\n};\r\n\r\nconst authReducer = (state = initialState, action: AuthAction): AuthState => {\r\n    switch (action.type) {\r\n        case AuthActionEnum.SET_USER_DATA:\r\n            return {...state, user: action.payload};\r\n        case AuthActionEnum.SET_IS_AUTH:\r\n            return {...state, isAuth: action.payload};\r\n        case AuthActionEnum.SET_INFO:\r\n            return {...state, info: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// const authMe = (): AppThunkType => async (dispatch) => {\r\n//     dispatch(setAppStatus('loading'))\r\n//     try {\r\n//         const data = await authAPI.authMe()\r\n//         dispatch(setUserData(data))\r\n//         dispatch(setIsAuth(true))\r\n//         dispatch(setAppStatus('succeed'))\r\n//         localStorage.setItem('auth', 'true')\r\n//         if (!data) {\r\n//             setAppError('No internet connection!')\r\n//         }\r\n//     } catch (e) {\r\n//         dispatch(setAppError(e.response.data.error))\r\n//         dispatch(setAppStatus('failed'))\r\n//     }\r\n// }\r\n// const register = (payload: RegisterPayloadType): AppThunkType => async (dispatch) => {\r\n//     dispatch(setAppStatus('loading'))\r\n//     try {\r\n//         const data = await authAPI.register(payload)\r\n//         dispatch(setIsRegistered(true))\r\n//         dispatch(setAppStatus('succeed'))\r\n//     } catch (e) {\r\n//         dispatch(setAppError(e.response.data.error))\r\n//         dispatch(setAppStatus('failed'))\r\n//     }\r\n// }\r\n// const restorePassword = (payload: { email: string }): AppThunkType => async (dispatch) => {\r\n//     dispatch(setAppStatus('loading'))\r\n//     try {\r\n//         const data = await authAPI.restorePassword(payload)\r\n//         dispatch(setAuthInfo(data.info))\r\n//         dispatch(setAppStatus('succeed'))\r\n//     } catch (e) {\r\n//         dispatch(setAppError(e.response.data.error))\r\n//         dispatch(setAppStatus('failed'))\r\n//     }\r\n// }\r\n\r\nexport default authReducer;\r\n","import {PacksAction, PacksActions, PacksState} from './types';\r\n\r\nconst initState: PacksState = {\r\n    packs: [],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 100,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    filter: '',\r\n    isMine: false\r\n}\r\n\r\nconst packsReducer = (state = initState, action: PacksAction): PacksState => {\r\n    switch (action.type) {\r\n        case PacksActions.SET_PACKS:\r\n            return {...state, packs: action.payload};\r\n        case PacksActions.SET_PAGE_COUNT:\r\n            return {...state, pageCount: action.payload};\r\n        case PacksActions.SET_PAGE:\r\n            return {...state, page: action.payload};\r\n        case PacksActions.SET_PACKS_TOTAL_COUNT:\r\n            return {...state, cardPacksTotalCount: action.payload};\r\n        case PacksActions.SET_IS_MINE:\r\n            return {...state, isMine: action.payload};\r\n        case PacksActions.SET_CARDS_QUANTITY:\r\n            return {...state, maxCardsCount: action.payload.max, minCardsCount: action.payload.min};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default packsReducer;\r\n","    import {AppAction, AppActionEnum, AppState} from './types';\r\n\r\nconst initialState: AppState = {\r\n    isInitialized: false,\r\n    status: 'idle',\r\n    error: ''\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppAction): AppState => {\r\n    switch (action.type) {\r\n        case AppActionEnum.SET_APP_IS_INITIALIZED:\r\n            return {...state, isInitialized: action.payload};\r\n        case AppActionEnum.SET_APP_STATUS:\r\n            return {...state, status: action.payload};\r\n        case AppActionEnum.SET_APP_ERROR:\r\n            return {...state, error: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appReducer;\r\n","import {CardsAction, CardsActions, CardsState} from './types';\r\n\r\nconst initState: CardsState = {\r\n    cards: [],\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    packUserId: ''\r\n}\r\n\r\nconst cardsReducer = (state = initState, action: CardsAction): CardsState => {\r\n    switch (action.type) {\r\n        case CardsActions.SET_CARDS:\r\n            return {...state, cards: action.payload};\r\n        case CardsActions.SET_CARDS_PAGE_COUNT:\r\n            return {...state, pageCount: action.payload};\r\n        case CardsActions.SET_CARDS_PAGE:\r\n            return {...state, page: action.payload};\r\n        case CardsActions.SET_CARDS_TOTAL_COUNT:\r\n            return {...state, cardsTotalCount: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default cardsReducer;\r\n","import {combineReducers} from 'redux';\r\nimport authReducer from './auth';\r\nimport packsReducer from './packs';\r\nimport appReducer from './app';\r\nimport cardsReducer from './cards';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport {\r\n    rootReducer\r\n};\r\n","import {applyMiddleware, compose, createStore} from '@reduxjs/toolkit';\r\nimport {rootReducer} from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport {\r\n    store,\r\n};\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n","import {createTheme} from '@material-ui/core';\r\n\r\nexport const theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main:'#673ab7'\r\n        },\r\n    },\r\n    typography: {\r\n        fontFamily: 'Comic Sans MS',\r\n    },\r\n    shape: {\r\n        borderRadius: 10\r\n    },\r\n    overrides: {\r\n        MuiContainer: {\r\n            root: {\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                margin: 20,\r\n                padding: 20,\r\n                overflowY: 'auto',\r\n            }\r\n\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: 'uppercase',\r\n                width: '130px',\r\n            }\r\n        },\r\n    },\r\n    props: {\r\n        MuiTextField: {\r\n            variant: 'outlined',\r\n        },\r\n    }\r\n\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './store';\nimport {BrowserRouter} from 'react-router-dom';\nimport {MuiThemeProvider} from '@material-ui/core';\nimport {theme} from './styles/theme';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <MuiThemeProvider theme={theme}>\n                <App />\n            </MuiThemeProvider>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"RegisterForm_paper__3Wx1k\",\"form\":\"RegisterForm_form__1YA2d\",\"formGroup\":\"RegisterForm_formGroup__1eES6\",\"formLabel\":\"RegisterForm_formLabel__37OlO\",\"icon1\":\"RegisterForm_icon1__1wcWh\",\"icon2\":\"RegisterForm_icon2__66SOW\",\"buttonBlock\":\"RegisterForm_buttonBlock__64Uln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"AsideBar_settings__2SVbs\",\"nav\":\"AsideBar_nav__tZhBF\",\"sliderBlock\":\"AsideBar_sliderBlock__D-ln5\",\"userInfoBlock\":\"AsideBar_userInfoBlock__NiG6s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"LoginForm_paper__3qGfh\",\"form\":\"LoginForm_form__36SWb\",\"formGroup\":\"LoginForm_formGroup__24Z5-\",\"formLabel\":\"LoginForm_formLabel__2tMXa\",\"button\":\"LoginForm_button__10zpS\",\"signUpBlock\":\"LoginForm_signUpBlock__3FZ3k\",\"icon\":\"LoginForm_icon__2DjGk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"RestorePassword_paper__3g9s6\",\"form\":\"RestorePassword_form__3pASA\",\"formLabel\":\"RestorePassword_formLabel__1lduY\",\"formGroup\":\"RestorePassword_formGroup__wDP9u\",\"button\":\"RestorePassword_button__3b3Qc\",\"text\":\"RestorePassword_text__2qVmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"SetPassword_paper__1u1ul\",\"formGroup\":\"SetPassword_formGroup__3sxZV\",\"buttonBlock\":\"SetPassword_buttonBlock__MuX-h\",\"text\":\"SetPassword_text__aFHGH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packList\":\"PacksList_packList__1rZQc\",\"searchBar\":\"PacksList_searchBar__3gFoO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableHead\":\"PacksTable_tableHead__3DWvv\",\"noPacksMessage\":\"PacksTable_noPacksMessage__3Fo2V\",\"noPacksMessageNone\":\"PacksTable_noPacksMessageNone__G6rmZ\",\"actionCell\":\"PacksTable_actionCell__2JcUq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myModal\":\"Modal_myModal__rClbI\",\"active\":\"Modal_active__2oSel\",\"myModalContent\":\"Modal_myModalContent__3gByB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appbar\":\"Navbar_appbar__301Oj\",\"toolbar\":\"Navbar_toolbar__2QZCs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"EditItemForm_form__1NRfs\",\"button\":\"EditItemForm_button__2YKM0\"};"],"sourceRoot":""}