{"version":3,"sources":["components/forms/register/RegisteredSuccess.module.css","components/forms/restore-password/CheckEmail.module.css","components/Pagination/PaginationBar.module.css","store/reducers/app/types.ts","store/reducers/auth/types.ts","components/forms/login/LoginForm.tsx","hooks/useAppSelector.ts","store/reducers/packs/types.ts","api/instance.ts","api/authAPI.ts","utils/handleError.ts","store/reducers/auth/auth-action-creators.ts","store/reducers/app/action-creators.ts","api/packsAPI.ts","store/reducers/cards/types.ts","store/reducers/packs/packs-action-creators.ts","api/cardsAPI.ts","router/index.ts","store/reducers/cards/cards-action-creators.ts","store/reducers/action-creators.ts","hooks/useActions.ts","pages/Login.tsx","components/forms/register/RegisteredSuccess.tsx","components/forms/register/RegisterForm.tsx","pages/Register.tsx","components/forms/restore-password/CheckEmail.tsx","components/forms/restore-password/RestorePasswordForm.tsx","pages/RestorePassword.tsx","pages/Error404.tsx","components/forms/set-password/SetPassword.tsx","pages/SetPassword.tsx","components/Profile/Profile.tsx","components/modals/Modal.tsx","components/forms/edit-item-form/EditItemForm.tsx","utils/date.ts","components/Packs/PacksTable.tsx","components/common/select/MySelect.tsx","components/Pagination/PaginationBar.tsx","components/forms/add-new-item-form/AddNewItemForm.tsx","components/Packs/Packs.tsx","components/Packs/PacksContainer.tsx","pages/Packs.tsx","components/Cards/CardTable.tsx","components/Cards/Cards.tsx","pages/Learn.tsx","components/AppRouter.tsx","components/common/error-bar/ErrorBar.tsx","components/Navbar/Navbar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/packs/index.ts","store/reducers/app/index.ts","store/reducers/cards/index.ts","store/reducers/index.ts","store/index.ts","styles/theme.tsx","index.tsx","components/forms/register/RegisterForm.module.css","components/Packs/Packs.module.css","components/forms/login/LoginForm.module.css","components/forms/restore-password/RestorePassword.module.css","components/forms/set-password/SetPassword.module.css","components/Packs/PacksTable.module.css","components/modals/Modal.module.css","components/forms/edit-item-form/EditItemForm.module.css","components/forms/add-new-item-form/AddNewItemForm.module.css","components/Navbar/Navbar.module.css"],"names":["module","exports","AppActionEnum","AuthActionEnum","LoginForm","onSubmitHandler","status","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","useState","visible","setVisible","Paper","elevation","className","s","paper","form","handleSubmit","FormLabel","formLabel","FormGroup","formGroup","TextField","variant","label","margin","getFieldProps","touched","style","color","type","passwordInput","icon","onClick","FormControlLabel","control","Checkbox","Button","button","disabled","signUpBlock","to","useAppSelector","useSelector","PacksActions","instance","axios","create","baseURL","withCredentials","authAPI","post","response","data","payload","delete","from","message","handleError","e","dispatch","error","AppActionCreators","setAppError","setAppStatus","AuthActionCreators","setUser","user","SET_USER_DATA","setIsAuth","isAuth","SET_IS_AUTH","setAuthInfo","info","SET_INFO","login","a","logout","authMe","register","restorePassword","setAppIsInitialized","isInitialized","SET_APP_IS_INITIALIZED","SET_APP_STATUS","SET_APP_ERROR","initializeApp","CardsActions","PACKS_URL","packsAPI","queryParams","get","params","cardsPack","id","put","PacksActionCreators","setPacks","SET_PACKS","setPageCount","SET_PAGE_COUNT","setPage","SET_PAGE","setCardPacksTotalCount","SET_PACKS_TOTAL_COUNT","fetchPacks","cardPacks","pageCount","cardPacksTotalCount","addPack","updatePack","removePack","RouteNames","CARDS_URL","cardsAPI","card","CardsActionCreators","setCards","SET_CARDS","setCardsPageCount","SET_CARDS_PAGE_COUNT","SET_CARDS_PAGE","setCardsTotalCount","SET_CARDS_TOTAL_COUNT","fetchCards","cards","cardsTotalCount","addCard","updateCard","removeCard","allActionCreators","useActions","useDispatch","bindActionCreators","Login","state","auth","app","useEffect","RegisteredSuccess","history","useHistory","setTimeout","push","fontSize","RegisterForm","isRegistered","setIsRegistered","confirmPassword","icon1","icon2","buttonBlock","Register","CheckEmail","RestorePasswordForm","isSent","setIsSent","text","RestorePassword","Error404","SetPasswordForm","SetPassword","Profile","Modal","children","rootClasses","myModal","active","join","myModalContent","event","stopPropagation","EditItemForm","onEditClick","buttonTitle","name","pack_id","title","setTitle","onChange","currentTarget","value","_id","size","formatDate","date","year","getFullYear","month","getMonth","day","getDate","PacksTable","packs","userId","onDeleteClick","modal","setModal","TableContainer","component","Table","aria-label","TableHead","tableHead","TableRow","TableCell","align","TableBody","map","pack","scope","PACKS","cardsCount","Date","updated","created","user_id","MySelect","options","defaultValue","o","PaginationBar","page","packsTotal","handlePageChange","handlePageCountChange","totalPages","Math","ceil","paginationBar","Pagination","count","AddNewItemForm","placeholder","Packs","isMine","setIsMine","handleCreatePack","handleSearch","handleDeletePack","handleEditPack","filter","onSearchClick","Grid","container","content","item","xs","settings","packList","searchBar","searchButton","Search","PacksContainer","newPackTitle","setNewPackTitle","setFilter","maxCardsCount","minCardsCount","getPacks","packName","CardTable","question","answer","Cards","useParams","forEach","p","handleCreateCard","cardsPack_id","Container","grades","getCard","sum","reduce","acc","grade","rand","random","res","i","newSum","console","log","Learn","shots","answerImg","questionImg","questionVideo","answerVideo","rating","more_id","setCard","first","setFirst","isChecked","setIsChecked","find","Card","position","top","left","transform","width","display","flexDirection","alignItems","CardContent","CardMedia","height","image","alt","Typography","CardActions","padding","marginTop","flexWrap","justifyContent","g","privateRoutes","path","exact","PROFILE","CARDS","LEARN","publicRoutes","LOGIN","REGISTER","RESTORE","SET_PASSWORD","ERROR","AppRouter","r","ErrorBar","isOpen","Snackbar","open","autoHideDuration","onClose","reason","Alert","severity","Navbar","AppBar","Toolbar","toolbar","App","LinearProgress","fixed","textAlign","CircularProgress","initialState","authReducer","action","initState","packsReducer","appReducer","maxGrade","minGrade","packUserId","cardsReducer","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","theme","createTheme","palette","primary","main","typography","fontFamily","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.657f6f19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"RegisteredSuccess_paper__2UFwJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"CheckEmail_paper__31ZgR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationBar\":\"PaginationBar_paginationBar__2ezqk\"};","type RequestStatusType = 'idle' | 'loading' | 'succeed' | 'failed';\r\n\r\ninterface AppState {\r\n    isInitialized: boolean;\r\n    status: RequestStatusType;\r\n    error: string;\r\n}\r\n\r\nexport enum AppActionEnum {\r\n    SET_APP_IS_INITIALIZED = 'SET_APP_IS_INITIALIZED',\r\n    SET_APP_STATUS = 'SET_APP_STATUS',\r\n    SET_APP_ERROR = 'SET_APP_ERROR',\r\n}\r\n\r\ninterface SetAppIsInitialized {\r\n    type: AppActionEnum.SET_APP_IS_INITIALIZED;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetAppStatus {\r\n    type: AppActionEnum.SET_APP_STATUS;\r\n    payload: RequestStatusType;\r\n}\r\n\r\ninterface SetAppError {\r\n    type: AppActionEnum.SET_APP_ERROR;\r\n    payload: string;\r\n}\r\n\r\ntype AppAction =\r\n    | SetAppIsInitialized\r\n    | SetAppStatus\r\n    | SetAppError\r\n\r\nexport type {\r\n    AppAction,\r\n    AppState,\r\n    SetAppError,\r\n    SetAppStatus,\r\n    SetAppIsInitialized,\r\n    RequestStatusType\r\n}\r\n","import {IUser} from '../../../models/IUser';\r\n\r\ninterface PingResponse {\r\n    ping: number;\r\n    backTime: number;\r\n    frontTime: string;\r\n    info: string;\r\n}\r\n\r\ntype AuthMeResponse = IUser\r\ntype LoginResponse = IUser\r\n\r\ninterface RegisterResponse {\r\n    addedUser: {\r\n        _id: string;\r\n        email: string;\r\n        rememberMe: boolean;\r\n        isAdmin: boolean;\r\n        name: string;\r\n        verified: boolean;\r\n        publicCardPacksCount: number;\r\n        created: Date;\r\n        updated: Date;\r\n        __v: number;\r\n    }\r\n}\r\n\r\ninterface RestoreResponse {\r\n    info: string;\r\n    success: boolean;\r\n    answer: boolean;\r\n    html: boolean;\r\n}\r\n\r\ninterface UpdateProfileResponse {\r\n    updatedUser: IUser;\r\n    token: string;\r\n    tokenDeathTime: number;\r\n}\r\n\r\ninterface AuthState {\r\n    user: IUser,\r\n    isAuth: boolean,\r\n    info: string,\r\n}\r\n\r\nexport enum AuthActionEnum {\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n    SET_IS_AUTH = 'SET_IS_AUTH',\r\n    SET_INFO = 'SET_INFO',\r\n}\r\n\r\ninterface SetUserData {\r\n    type: AuthActionEnum.SET_USER_DATA;\r\n    payload: IUser\r\n}\r\n\r\ninterface SetIsAuth {\r\n    type: AuthActionEnum.SET_IS_AUTH;\r\n    payload: boolean;\r\n}\r\n\r\ninterface SetAuthInfo {\r\n    type: AuthActionEnum.SET_INFO;\r\n    payload: string\r\n}\r\n\r\ninterface LoginPayload {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n}\r\n\r\ninterface RegisterPayload {\r\n    email: string,\r\n    password: string,\r\n}\r\n\r\ntype AuthAction =\r\n    | SetUserData\r\n    | SetIsAuth\r\n    | SetAuthInfo\r\n\r\nexport type {\r\n    AuthState,\r\n    AuthAction,\r\n    SetUserData,\r\n    SetIsAuth,\r\n    SetAuthInfo,\r\n    LoginPayload,\r\n    RegisterPayload,\r\n    PingResponse,\r\n    AuthMeResponse,\r\n    LoginResponse,\r\n    RegisterResponse,\r\n    RestoreResponse,\r\n    UpdateProfileResponse,\r\n}\r\n","import React, {useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Button, Checkbox, FormControlLabel, FormGroup, FormLabel, Paper, TextField} from '@material-ui/core';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport s from './LoginForm.module.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {LoginPayload} from '../../../store/reducers/auth/types';\r\nimport {RequestStatusType} from '../../../store/reducers/app/types';\r\n\r\ntype LoginPropsType = {\r\n    onSubmitHandler: (values: LoginPayload) => void\r\n    status: RequestStatusType\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\nconst LoginForm: React.FC<LoginPropsType> = ({onSubmitHandler, status}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'panich2303@gmail.com',\r\n            password: '12345678',\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be more than 7 characters'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            onSubmitHandler(values);\r\n        },\r\n    });\r\n    const [visible, setVisible]  = useState<boolean>(false);\r\n\r\n    return (\r\n            <Paper elevation={3} className={s.paper}>\r\n                <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                    <FormLabel>\r\n                        <h1 className={s.formLabel}>Log In</h1>\r\n                    </FormLabel>\r\n                    <FormGroup className={s.formGroup}>\r\n                        <TextField\r\n                            variant={'standard'}\r\n                            label='Email'\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            variant={'standard'}\r\n                            type={visible ? 'text' : 'password'}\r\n                            label='Password'\r\n                            margin='normal'\r\n                            className={s.passwordInput}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        {\r\n                            !formik.errors.password && !formik.errors.email && <VisibilityIcon className={s.icon}\r\n                                                                       onClick={() => setVisible(!visible)}\r\n                                                                       color={visible ? 'primary' : 'inherit'}\r\n                            />\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    {...formik.getFieldProps('rememberMe')}\r\n                                    color='primary'\r\n                                />\r\n                            }\r\n                        />\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                            className={s.button}\r\n                            disabled={status === 'loading'}\r\n                        >\r\n                            Sign In</Button>\r\n                    </FormGroup>\r\n                    <div className={s.signUpBlock}>\r\n                        <span>Don't have an account? <Link to='/register'>Sign Up!</Link></span>\r\n                        <Link to='/restore'>Forgot Password?</Link>\r\n                    </div>\r\n                </form>\r\n            </Paper>\r\n    );\r\n};\r\n\r\nexport {\r\n    LoginForm\r\n}\r\n","import {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {RootStateType} from '../store/reducers';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import {IPack} from '../../../models/IPack';\r\n\r\ninterface PacksState {\r\n    packs: IPack[];\r\n    cardPacksTotalCount: number;\r\n    maxCardsCount: number;\r\n    minCardsCount: number;\r\n    page: number;\r\n    pageCount: number;\r\n    filter: string;\r\n}\r\n\r\ninterface GetPacksResponse {\r\n    cardPacks: IPack[];\r\n    page: number;\r\n    pageCount: number;\r\n    minCardsCount: number;\r\n    maxCardsCount: number;\r\n    cardPacksTotalCount: number;\r\n}\r\n\r\ninterface GetPacksQueryParams {\r\n    packName?: string;\r\n    min?: number;\r\n    max?: number;\r\n    page: number;\r\n    pageCount: number;\r\n    user_id?: string;\r\n    sortPacks?: string;\r\n}\r\n\r\ninterface PackPayload {\r\n    _id?: string;\r\n    name?: string;\r\n    path?: string;\r\n    private?: boolean;\r\n    type?: string;\r\n    grade?: number;\r\n    shots?: number;\r\n    rating?: number;\r\n    deckCover?: string;\r\n}\r\n\r\nexport enum PacksActions {\r\n    SET_PACKS = 'SET_PACKS',\r\n    SET_PAGE_COUNT = 'SET_PAGE_COUNT',\r\n    SET_PAGE = 'SET_PAGE',\r\n    SET_PACKS_TOTAL_COUNT = 'SET_PACKS_TOTAL_COUNT',\r\n    FILTER_PACKS = 'FILTER_PACKS',\r\n}\r\n\r\ninterface SetPacks {\r\n    type: PacksActions.SET_PACKS;\r\n    payload: IPack[];\r\n}\r\n\r\ninterface SetPageCount {\r\n    type: PacksActions.SET_PAGE_COUNT;\r\n    payload: number;\r\n}\r\n\r\ninterface SetPage {\r\n    type: PacksActions.SET_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface SetPacksTotalCount {\r\n    type: PacksActions.SET_PACKS_TOTAL_COUNT;\r\n    payload: number;\r\n}\r\n\r\n\r\ntype PacksAction =\r\n    | SetPacks\r\n    | SetPageCount\r\n    | SetPage\r\n    | SetPacksTotalCount\r\n\r\nexport type {\r\n    PacksState,\r\n    GetPacksResponse,\r\n    GetPacksQueryParams,\r\n    PackPayload,\r\n    SetPacks,\r\n    SetPageCount,\r\n    SetPage,\r\n    SetPacksTotalCount,\r\n    PacksAction\r\n}\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n});\r\n\r\nexport {\r\n    instance\r\n};\r\n","import {instance} from './instance';\r\nimport {\r\n    AuthMeResponse,\r\n    LoginPayload,\r\n    LoginResponse,\r\n    PingResponse,\r\n    RegisterPayload,\r\n    RegisterResponse, RestoreResponse, UpdateProfileResponse\r\n} from '../store/reducers/auth/types';\r\nconst from = 'pvlchkhrv@gmail.com';\r\nconst message = `<div>password recover link: <a href='https://neko-back.herokuapp.com/2.0/set-new-password/$token$'>Link</a></div>`;\r\n\r\nexport const authAPI = {\r\n    async ping() {\r\n        const response = await instance.get<PingResponse>(`/ping/?frontTime=${Date.now()}`);\r\n        return response.data;\r\n    },\r\n    async authMe() {\r\n        const response = await instance.post<AuthMeResponse>('auth/me', {});\r\n        return response.data;\r\n    },\r\n    async login(payload: LoginPayload) {\r\n        const response = await instance.post<LoginResponse>('auth/login', payload);\r\n        return response.data\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me', {});\r\n    },\r\n    async register(payload: RegisterPayload) {\r\n        const response = await instance.post<RegisterResponse>(`auth/register`, payload);\r\n        return response.data;\r\n    },\r\n    async restorePassword(payload: { email: string }) {\r\n        const response = await instance.post<RestoreResponse>('/auth/forgot', {...payload, from, message});\r\n        return response.data;\r\n    },\r\n    setNewPassword(payload: { password: string, resetPasswordToken: string }) {\r\n        return instance.post<ResponseType>('auth/new-password', payload);\r\n    },\r\n    updateProfile(payload: { name?: string, avatar?: string }) {\r\n        return instance.put<UpdateProfileResponse>('auth/me', payload);\r\n    }\r\n};\r\n","import {AppActionCreators} from '../store/reducers/app/action-creators';\r\nimport {AppDispatch} from '../store';\r\n\r\nexport const handleError = (e: any) => (dispatch: AppDispatch)=> {\r\n    const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n    dispatch(AppActionCreators.setAppError(error));\r\n    dispatch(AppActionCreators.setAppStatus('failed'))\r\n}\r\n","import {IUser} from '../../../models/IUser';\r\nimport {AuthActionEnum, LoginPayload, SetAuthInfo, SetIsAuth, SetUserData} from './types';\r\nimport {AppDispatch} from '../../index';\r\nimport {authAPI} from '../../../api/authAPI';\r\nimport {AppActionCreators} from '../app/action-creators';\r\nimport {handleError} from '../../../utils/handleError';\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser): SetUserData => ({type: AuthActionEnum.SET_USER_DATA, payload: user}),\r\n    setIsAuth: (isAuth: boolean): SetIsAuth => ({type: AuthActionEnum.SET_IS_AUTH, payload: isAuth}),\r\n    setAuthInfo: (info: string): SetAuthInfo => ({type: AuthActionEnum.SET_INFO, payload: info}),\r\n    login: (payload: LoginPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const user = await authAPI.login(payload);\r\n            // localStorage.setItem('user', JSON.stringify(user));\r\n            dispatch(AuthActionCreators.setUser(user));\r\n            dispatch(AuthActionCreators.setIsAuth(true));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AppActionCreators.setAppStatus('loading'));\r\n            await authAPI.logout();\r\n            // localStorage.removeItem('auth');\r\n            // localStorage.removeItem('user');\r\n            dispatch(AuthActionCreators.setUser({} as IUser));\r\n            dispatch(AuthActionCreators.setIsAuth(false));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            return handleError(e);\r\n        }\r\n    },\r\n    authMe: () => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const user = await authAPI.authMe();\r\n            dispatch(AuthActionCreators.setUser(user));\r\n            dispatch(AuthActionCreators.setIsAuth(true));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    register: (email: string, password: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await authAPI.register({email, password});\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    restorePassword: (email: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const data = await authAPI.restorePassword({email});\r\n            dispatch(AuthActionCreators.setAuthInfo(data.info));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n};\r\n","import {AppActionEnum, RequestStatusType, SetAppError, SetAppIsInitialized, SetAppStatus} from './types';\r\nimport {AppDispatch} from '../../index';\r\nimport {AuthActionCreators} from '../auth/auth-action-creators';\r\nimport {authAPI} from '../../../api/authAPI';\r\n\r\nexport const AppActionCreators = {\r\n    setAppIsInitialized: (isInitialized: boolean): SetAppIsInitialized => ({\r\n        type: AppActionEnum.SET_APP_IS_INITIALIZED,\r\n        payload: isInitialized\r\n    }),\r\n    setAppStatus: (status: RequestStatusType): SetAppStatus => ({type: AppActionEnum.SET_APP_STATUS, payload: status}),\r\n    setAppError: (error: string): SetAppError => ({type: AppActionEnum.SET_APP_ERROR, payload: error}),\r\n    initializeApp: () => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const user = await authAPI.authMe();\r\n            if (user) {\r\n                dispatch(AuthActionCreators.setUser(user));\r\n                dispatch(AppActionCreators.setAppIsInitialized(true));\r\n                dispatch(AuthActionCreators.setIsAuth(true));\r\n                dispatch(AppActionCreators.setAppStatus('succeed'));\r\n            } else {\r\n                dispatch(AppActionCreators.setAppIsInitialized(true));\r\n                dispatch(AppActionCreators.setAppStatus('succeed'));\r\n            }\r\n         } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppIsInitialized(true));\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    }\r\n}\r\n","import {instance} from './instance'\r\nimport {GetPacksQueryParams, GetPacksResponse, PackPayload} from '../store/reducers/packs/types';\r\n\r\nconst PACKS_URL = 'cards/pack/';\r\n\r\nconst packsAPI = {\r\n    async getPacks(queryParams: GetPacksQueryParams) {\r\n        const response = await instance.get<GetPacksResponse>(PACKS_URL, {params: queryParams});\r\n        return response.data;\r\n    },\r\n    addPack(payload: PackPayload) {\r\n        return instance.post(PACKS_URL, {cardsPack: payload});\r\n    },\r\n    removePack(id: string) {\r\n        return instance.delete(PACKS_URL, {params: {id}});\r\n    },\r\n    updatePack(payload: PackPayload) {\r\n        return instance.put(PACKS_URL, {cardsPack: payload});\r\n    },\r\n};\r\n\r\nexport {\r\n    packsAPI,\r\n    PACKS_URL\r\n};\r\n","import {ICard} from '../../../models/ICard';\r\n\r\n\r\ninterface CardsState {\r\n    cards: ICard[];\r\n    cardsTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    packUserId: string; // id юзера, создавшего колоду\r\n}\r\n\r\ninterface GetCardsQueryParams {\r\n    cardAnswer?: string;\r\n    cardQuestion?: string;\r\n    min?: number;\r\n    max?: number;\r\n    cardsPack_id: string;\r\n    pageCount?: number;\r\n    page?: number;\r\n    sortCards?: string;\r\n}\r\n\r\ninterface CardPayload {\r\n    cardsPack_id: string;\r\n    question?: string;\r\n    answer?: string;\r\n    grade?: number;\r\n    shots?: number;\r\n    rating?: number;\r\n    answerImg?: string;\r\n    questionImg?: string;\r\n    questionVideo?: string;\r\n    answerVideo?: string;\r\n    type?: string;\r\n}\r\n\r\nexport enum CardsActions {\r\n    SET_CARDS = 'SET_CARDS',\r\n    SET_CARDS_PAGE_COUNT = 'SET_PAGE_COUNT',\r\n    SET_CARDS_PAGE = 'SET_PAGE',\r\n    SET_CARDS_TOTAL_COUNT = 'SET_CARDS_TOTAL_COUNT',\r\n}\r\n\r\ninterface SetCards {\r\n    type: CardsActions.SET_CARDS;\r\n    payload: ICard[];\r\n}\r\n\r\ninterface SetCardsPageCount {\r\n    type: CardsActions.SET_CARDS_PAGE_COUNT;\r\n    payload: number;\r\n}\r\n\r\ninterface SetCardsPage {\r\n    type: CardsActions.SET_CARDS_PAGE;\r\n    payload: number;\r\n}\r\n\r\ninterface SetCardsTotalCount {\r\n    type: CardsActions.SET_CARDS_TOTAL_COUNT;\r\n    payload: number;\r\n}\r\n\r\ntype CardsAction =\r\n    | SetCards\r\n    | SetCardsPage\r\n    | SetCardsPageCount\r\n    | SetCardsTotalCount\r\n\r\nexport type {\r\n    CardsState,\r\n    GetCardsQueryParams,\r\n    CardPayload,\r\n    CardsAction,\r\n    SetCards,\r\n    SetCardsPage,\r\n    SetCardsPageCount,\r\n    SetCardsTotalCount\r\n};\r\n","import {IPack} from '../../../models/IPack';\r\nimport {\r\n    GetPacksQueryParams,\r\n    PackPayload,\r\n    PacksActions,\r\n    SetPacks,\r\n    SetPacksTotalCount,\r\n    SetPage,\r\n    SetPageCount\r\n} from './types';\r\nimport {AppDispatch} from '../../index';\r\nimport {AppActionCreators} from '../app/action-creators';\r\nimport {packsAPI} from '../../../api/packsAPI';\r\n\r\nexport const PacksActionCreators = {\r\n    setPacks: (payload: IPack[]): SetPacks => ({type: PacksActions.SET_PACKS, payload}),\r\n    setPageCount: (payload: number): SetPageCount => ({type: PacksActions.SET_PAGE_COUNT, payload}),\r\n    setPage: (payload: number): SetPage => ({type: PacksActions.SET_PAGE, payload}),\r\n    setCardPacksTotalCount: (payload: number): SetPacksTotalCount => ({type: PacksActions.SET_PACKS_TOTAL_COUNT, payload}),\r\n    fetchPacks: (payload: GetPacksQueryParams) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const data = await packsAPI.getPacks(payload);\r\n            dispatch(PacksActionCreators.setPacks(data.cardPacks));\r\n            dispatch(PacksActionCreators.setPageCount(data.pageCount));\r\n            dispatch(PacksActionCreators.setCardPacksTotalCount(data.cardPacksTotalCount));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    addPack: (payload: PackPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await packsAPI.addPack(payload);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    updatePack: (payload: PackPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await packsAPI.updatePack(payload);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    removePack: (id: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await packsAPI.removePack(id);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n}\r\n","import {instance} from './instance'\r\nimport {CardPayload, CardsState, GetCardsQueryParams} from '../store/reducers/cards/types';\r\n\r\nconst CARDS_URL = 'cards/card';\r\n\r\nconst cardsAPI = {\r\n    async getCards(queryParams: GetCardsQueryParams) {\r\n        const response = await instance.get<CardsState>(CARDS_URL, {params: queryParams});\r\n        return response.data;\r\n    },\r\n    addCard(payload: CardPayload) {\r\n        return instance.post(CARDS_URL, {card: payload});\r\n    },\r\n    removeCard(id: string) {\r\n        return instance.delete(CARDS_URL, {params: {id}});\r\n    },\r\n    updateCard(payload: CardPayload) {\r\n        return instance.put(CARDS_URL, {card: payload});\r\n    },\r\n    estimateCard(payload: {card_id: string, grade: number}) {\r\n        return instance.put('cards/grade/', payload)\r\n    }\r\n};\r\n\r\nexport {\r\n    cardsAPI,\r\n    CARDS_URL\r\n};\r\n","import Login from '../pages/Login'\r\nimport Register from '../pages/Register';\r\nimport RestorePassword from '../pages/RestorePassword';\r\nimport Error404 from '../pages/Error404';\r\nimport SetPassword from '../pages/SetPassword';\r\nimport Profile from '../components/Profile/Profile';\r\nimport Packs from '../pages/Packs';\r\nimport Cards from '../components/Cards/Cards';\r\nimport {ComponentType} from 'react';\r\nimport Learn from '../pages/Learn';\r\n\r\ninterface IRoute {\r\n    path: string;\r\n    component: ComponentType;\r\n    exact: boolean;\r\n}\r\n\r\nexport enum RouteNames {\r\n    PACKS = '/packs',\r\n    CARDS = '/packs/:id',\r\n    PROFILE = '/profile',\r\n    LOGIN = '/login',\r\n    REGISTER = '/register',\r\n    RESTORE = '/restore',\r\n    SET_PASSWORD = '/set-password',\r\n    ERROR = '/error',\r\n    LEARN = '/learn/:id'\r\n}\r\n\r\nconst privateRoutes: IRoute[] = [\r\n    {path: RouteNames.PACKS, exact: true, component: Packs},\r\n    {path: RouteNames.PROFILE, component: Profile, exact: true},\r\n    {path: RouteNames.CARDS, component: Cards, exact: true},\r\n    {path: RouteNames.LEARN, component: Learn, exact: true},\r\n];\r\n\r\nconst publicRoutes: IRoute[] = [\r\n    {path: RouteNames.LOGIN, component: Login, exact: true},\r\n    {path: RouteNames.REGISTER, component: Register, exact: true},\r\n    {path: RouteNames.RESTORE, component: RestorePassword, exact: true},\r\n    {path: RouteNames.SET_PASSWORD, component: SetPassword, exact: true},\r\n    {path: RouteNames.ERROR, component: Error404, exact: false},\r\n];\r\n\r\nexport {\r\n    publicRoutes,\r\n    privateRoutes\r\n}\r\n","\r\nimport {AppActionCreators} from '../app/action-creators';\r\nimport {AppDispatch} from '../../index';\r\nimport {\r\n    CardPayload,\r\n    CardsActions,\r\n    GetCardsQueryParams,\r\n    SetCards,\r\n    SetCardsPage,\r\n    SetCardsPageCount,\r\n    SetCardsTotalCount\r\n} from './types';\r\nimport {cardsAPI} from '../../../api/cardsAPI';\r\nimport {ICard} from '../../../models/ICard';\r\n\r\nexport const CardsActionCreators = {\r\n    setCards: (payload: ICard[]): SetCards => ({type: CardsActions.SET_CARDS, payload}),\r\n    setCardsPageCount: (payload: number): SetCardsPageCount => ({type: CardsActions.SET_CARDS_PAGE_COUNT, payload}),\r\n    setPage: (payload: number): SetCardsPage => ({type: CardsActions.SET_CARDS_PAGE, payload}),\r\n    setCardsTotalCount: (payload: number): SetCardsTotalCount => ({type: CardsActions.SET_CARDS_TOTAL_COUNT, payload}),\r\n    fetchCards: (payload: GetCardsQueryParams) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            const data = await cardsAPI.getCards(payload);\r\n            dispatch(CardsActionCreators.setCards(data.cards));\r\n            dispatch(CardsActionCreators.setCardsPageCount(data.pageCount));\r\n            dispatch(CardsActionCreators.setCardsTotalCount(data.cardsTotalCount));\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    addCard: (payload: CardPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await cardsAPI.addCard(payload);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    updateCard: (payload: CardPayload) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await cardsAPI.updateCard(payload);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n    removeCard: (id: string) => async (dispatch: AppDispatch) => {\r\n        dispatch(AppActionCreators.setAppStatus('loading'));\r\n        try {\r\n            await cardsAPI.removeCard(id);\r\n            dispatch(AppActionCreators.setAppStatus('succeed'));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(AppActionCreators.setAppError(error));\r\n            dispatch(AppActionCreators.setAppStatus('failed'));\r\n        }\r\n    },\r\n}\r\n","import {AppActionCreators} from './app/action-creators';\r\nimport {AuthActionCreators} from './auth/auth-action-creators';\r\nimport {PacksActionCreators} from './packs/packs-action-creators';\r\nimport {CardsActionCreators} from './cards/cards-action-creators';\r\n\r\nexport const allActionCreators = {\r\n    ...AppActionCreators,\r\n    ...AuthActionCreators,\r\n    ...PacksActionCreators,\r\n    ...CardsActionCreators\r\n};\r\n","import {AppDispatch} from '../store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {allActionCreators} from '../store/reducers/action-creators';\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(allActionCreators, dispatch);\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {LoginForm} from '../components/forms/login/LoginForm';\r\nimport {Redirect} from 'react-router';\r\nimport {LoginPayload} from '../store/reducers/auth/types';\r\nimport {useAppSelector} from '../hooks/useAppSelector';\r\nimport {useActions} from '../hooks/useActions';\r\nimport {RouteNames} from '../router';\r\n\r\n\r\nconst Login = () => {\r\n    const {user} = useAppSelector(state => state.auth);\r\n    const {status} = useAppSelector(state => state.app);\r\n    const {login, authMe} = useActions()\r\n    const onSubmitHandler = (payload: LoginPayload) => {\r\n        login(payload);\r\n    };\r\n\r\n    useEffect(() => {\r\n        authMe();\r\n    }, []);\r\n\r\n    // if (Object.keys(user).length !== 0) {\r\n    //     return <Redirect to={RouteNames.PACKS}/>\r\n    // }\r\n\r\n    return (\r\n        <LoginForm onSubmitHandler={onSubmitHandler}\r\n                   status={status}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, {useEffect} from 'react';\r\nimport {Paper} from '@material-ui/core';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport s from './RegisteredSuccess.module.css';\r\nimport {useHistory} from 'react-router';\r\n\r\nconst RegisteredSuccess: React.FC<{}> = () => {\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        setTimeout(() => history.push('/login'), 2000)\r\n    }, [])\r\n\r\n    return (\r\n            <Paper elevation={3} className={s.paper}>\r\n                <LockOpenIcon fontSize='large'/>\r\n                <h3>You've been successfully registered</h3>\r\n                <p>Please Sign In on the Login Page</p>\r\n            </Paper>\r\n    );\r\n};\r\n\r\nexport default RegisteredSuccess;\r\n","import React, {useState} from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Button, FormGroup, FormLabel, Paper, TextField} from '@material-ui/core';\r\nimport s from './RegisterForm.module.css'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport {useHistory} from 'react-router';\r\nimport {useActions} from '../../../hooks/useActions';\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport RegisteredSuccess from './RegisteredSuccess';\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    confirmPassword?: string;\r\n}\r\n\r\nconst RegisterForm: React.FC = () => {\r\n    const [isRegistered, setIsRegistered] = useState<boolean>(false)\r\n    const history = useHistory();\r\n    const {register} = useActions();\r\n    const {status} = useAppSelector(state => state.app);\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'panich2303@gmail.com',\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required!';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be more than 7 characters'\r\n            }\r\n\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Required!';\r\n            } else if (values.confirmPassword.length < 8) {\r\n                errors.confirmPassword = 'Must be more than 7 characters'\r\n            } else if (values.confirmPassword !== values.password) {\r\n                errors.confirmPassword = 'Does not match the above'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            setIsRegistered(true);\r\n            register(values.email, values.password);\r\n        },\r\n    });\r\n\r\n    if (isRegistered) {\r\n        return <RegisteredSuccess/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Paper className={s.paper} elevation={3}>\r\n                <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                    <FormLabel>\r\n                        <h1 className={s.formLabel}>Sign Up</h1>\r\n                    </FormLabel>\r\n                    <FormGroup className={s.formGroup}>\r\n                        <TextField\r\n                            variant={'standard'}\r\n                            label='Email'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            variant={'standard'}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <TextField\r\n                            variant={'standard'}\r\n                            type='password'\r\n                            label='Confirm password'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n                        {formik.touched.confirmPassword &&\r\n                        formik.errors.confirmPassword ?\r\n                            <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div> : null}\r\n                        <VisibilityIcon className={s.icon1}/>\r\n                        <VisibilityIcon className={s.icon2}/>\r\n                        <div className={s.buttonBlock}>\r\n                            <Button\r\n                                onClick={() => history.push('/login')}\r\n                                color={'secondary'}\r\n                                className={s.button}\r\n                                variant={'contained'}\r\n                            >\r\n                                Cancel</Button>\r\n                            <Button\r\n                                type={'submit'}\r\n                                color={'primary'}\r\n                                variant={'contained'}\r\n                                className={s.button}\r\n                                disabled={status === 'loading'}\r\n                            >\r\n                                Sign Up</Button>\r\n                        </div>\r\n                    </FormGroup>\r\n                </form>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    RegisterForm\r\n}\r\n","import React from 'react';\r\nimport {RegisterForm} from '../components/forms/register/RegisterForm';\r\n\r\n\r\nconst Register = () => {\r\n    return (\r\n        <div>\r\n            <RegisterForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import React, {useEffect} from 'react';\r\nimport {Paper} from '@material-ui/core';\r\nimport DraftsTwoToneIcon from '@material-ui/icons/DraftsTwoTone';\r\nimport s from './CheckEmail.module.css';\r\nimport {useHistory} from 'react-router';\r\n\r\ntype CheckEmailPropsType = {\r\n    info: string | null\r\n}\r\n\r\nconst CheckEmail: React.FC<CheckEmailPropsType> = ({info}) => {\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        setTimeout(() => history.push('/login'), 3000)\r\n    }, [])\r\n\r\n    return (\r\n            <Paper elevation={3} className={s.paper}>\r\n                <DraftsTwoToneIcon fontSize='large'/>\r\n                <h3>{info}</h3>\r\n                <p>Check you email</p>\r\n            </Paper>\r\n    );\r\n};\r\n\r\nexport default CheckEmail;\r\n","import React, {useState} from 'react'\r\nimport {useFormik} from 'formik'\r\nimport {Button, FormGroup, FormLabel, Paper, TextField} from '@material-ui/core'\r\nimport s from './RestorePassword.module.css'\r\nimport CheckEmail from './CheckEmail'\r\nimport {useHistory} from 'react-router'\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport {useActions} from '../../../hooks/useActions';\r\n\r\ntype FormikErrorType = {\r\n    email?: string;\r\n}\r\n\r\nconst RestorePasswordForm: React.FC = () => {\r\n    const info = useAppSelector(state => state.auth.info);\r\n    const status = useAppSelector(state => state.app.status);\r\n    const [isSent, setIsSent] = useState<boolean>(false);\r\n    const {restorePassword} = useActions();\r\n    const history = useHistory();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            setIsSent(true);\r\n            restorePassword(values.email);\r\n        },\r\n    });\r\n\r\n    if (isSent) {\r\n        return <CheckEmail info={info}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper className={s.paper} elevation={3}>\r\n                <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                    <FormLabel>\r\n                        <h2 className={s.formLabel}>Forgot your password?</h2>\r\n                    </FormLabel>\r\n                    <FormGroup className={s.formGroup}>\r\n                        <TextField\r\n                            variant='standard'\r\n                            label='Email'\r\n                            margin='normal'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <p className={s.text}>Enter your email address and we will send you further instructions</p>\r\n                        <Button\r\n                            type='submit'\r\n                            variant='contained'\r\n                            color='primary'\r\n                            className={s.button}\r\n                            disabled={status === 'loading'}\r\n                        >\r\n                            Send my password</Button>\r\n                        <Button\r\n                            onClick={() => history.push('/login')}\r\n                            variant='contained'\r\n                            color='secondary'\r\n                            className={s.button}>\r\n                            Cancel</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    RestorePasswordForm\r\n}\r\n","import React from 'react';\r\nimport {RestorePasswordForm} from '../components/forms/restore-password/RestorePasswordForm';\r\n\r\nconst RestorePassword = () => {\r\n    return (\r\n        <RestorePasswordForm />\r\n    );\r\n};\r\n\r\nexport default RestorePassword;\r\n","import React from 'react';\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <div>\r\n            <h1 style={{ color: 'red', fontSize: 25 }}>Error occurred! You are trying to load a not existing page</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Error404;\r\n","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {Button, FormGroup, FormLabel, Paper, TextField} from '@material-ui/core';\r\nimport s from './SetPassword.module.css';\r\n\r\ntype FormikErrorType = {\r\n    password?: string;\r\n}\r\n\r\nconst SetPasswordForm: React.FC = () => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: 'panich2303@gmail.com',\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required!';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be more than 7 characters'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            ;\r\n        },\r\n    });\r\n    return (\r\n        <Paper className={s.paper} elevation={3}>\r\n            <FormLabel>\r\n                <h3 style={{color: '#2D2E46'}}>Create New Password</h3>\r\n            </FormLabel>\r\n            <FormGroup className={s.formGroup}>\r\n                <TextField\r\n                    variant={'standard'}\r\n                    label='New password'\r\n                    type='password'\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.touched.password &&\r\n                formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                <TextField\r\n                    variant={'standard'}\r\n                    label='Confirm password'\r\n                    type='password'\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.touched.password &&\r\n                formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                <p className={s.text}>Create new password and we will send you further instructions to email</p>\r\n                <div className={s.buttonBlock}>\r\n                    <Button\r\n                        onClick={() => {\r\n                        }}\r\n                        type={'submit'}\r\n                        variant={'contained'}\r\n                        color={'secondary'}\r\n                        className={s.button}>\r\n                        Cancel</Button>\r\n                    <Button\r\n                        type={'submit'}\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        className={s.button}\r\n                        onClick={() => {\r\n                        }}>\r\n                        Change password</Button>\r\n                </div>\r\n            </FormGroup>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport {\r\n    SetPasswordForm\r\n}\r\n","import React from 'react';\r\nimport {SetPasswordForm} from '../components/forms/set-password/SetPassword';\r\n\r\nconst SetPassword = () => {\r\n    return (\r\n        <div>\r\n            <SetPasswordForm/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SetPassword;\r\n","import React from 'react';\r\nconst Profile = () => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React, {FC} from 'react';\r\nimport s from './Modal.module.css'\r\ntype MyModalPropsType = {\r\n    visible: boolean;\r\n    setVisible: (visible: boolean) => void;\r\n}\r\n\r\nconst Modal: FC<MyModalPropsType> = ({children, visible, setVisible}) => {\r\n    const rootClasses = [s.myModal];\r\n    if (visible) {\r\n        rootClasses.push(s.active)\r\n    }\r\n\r\n    return (\r\n        <div className={rootClasses.join(' ')} onClick={() => setVisible(false)}>\r\n            <div className={s.myModalContent} onClick={event => {\r\n                event.stopPropagation()\r\n            }}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, {useState} from 'react'\r\nimport {Button, TextField} from '@material-ui/core'\r\nimport s from './EditItemForm.module.css'\r\nimport {PackPayload} from '../../../store/reducers/packs/types';\r\n\r\ntype AddItemPropsType = {\r\n    onEditClick: (payload: PackPayload) => void\r\n    setVisible: (visible: boolean) => void\r\n    buttonTitle: string\r\n    pack_id: string\r\n    name: string\r\n}\r\n\r\nconst EditItemForm: React.FC<AddItemPropsType> = ({onEditClick, buttonTitle, setVisible, name, pack_id}) => {\r\n    const [title, setTitle] = useState<string>(() => name);\r\n    return (\r\n        <form className={s.form}>\r\n            <TextField onChange={e => setTitle(e.currentTarget.value)}\r\n                       value={title}\r\n            />\r\n            <div className={s.button}>\r\n                <Button onClick={() => {\r\n                    onEditClick({name: title, _id: pack_id})\r\n                    setVisible(false)\r\n                }}\r\n                        color='primary'\r\n                        variant='outlined'\r\n                        size='medium'\r\n                        className={s.button}\r\n                        disabled={title.length < 1}\r\n                >{buttonTitle}</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditItemForm;\r\n","export const formatDate = (date: Date): string => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}`: date.getMonth() + 1;\r\n    const day = date.getDate() < 10 ? `0${date.getDate() + 1}`: date.getDate() + 1;\r\n    return `${day}.${month}.${year}`;\r\n};\r\n","import {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from '@material-ui/core'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './PacksTable.module.css'\r\nimport Modal from '../modals/Modal';\r\nimport EditItemForm from '../forms/edit-item-form/EditItemForm';\r\nimport {FC, useState} from 'react';\r\nimport {IPack} from '../../models/IPack';\r\nimport {formatDate} from '../../utils/date';\r\nimport {PackPayload} from '../../store/reducers/packs/types';\r\nimport {RouteNames} from '../../router';\r\nimport { useHistory} from 'react-router';\r\n\r\ntype PackTsablePropsType = {\r\n    packs: IPack[];\r\n    userId?: string;\r\n    onDeleteClick: (id: string) => void;\r\n    onEditClick: (payload: PackPayload) => void;\r\n    visible: boolean;\r\n    setVisible: (visible: boolean) => void;\r\n}\r\n\r\nexport const PacksTable: FC<PackTsablePropsType> = ({\r\n                                                       packs,\r\n                                                       userId,\r\n                                                       onDeleteClick,\r\n                                                       onEditClick,\r\n                                                   }) => {\r\n    const [modal, setModal] = useState<boolean>(false);\r\n    const history = useHistory();\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label='simple table'>\r\n                <TableHead className={s.tableHead}>\r\n                    <TableRow>\r\n                        <TableCell>Title</TableCell>\r\n                        <TableCell align='center'>Cards</TableCell>\r\n                        <TableCell align='center'>Updated</TableCell>\r\n                        <TableCell align='center'>Created</TableCell>\r\n                        <TableCell align='center'>Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {packs.map((pack) => (\r\n                        <TableRow key={pack._id}>\r\n                            <TableCell component='th' scope='row'>\r\n                                <NavLink to={RouteNames.PACKS + `/${pack._id}`}>{pack.name}</NavLink>\r\n                            </TableCell>\r\n                            <TableCell align='center'>{pack.cardsCount}</TableCell>\r\n                            <TableCell align='center'>{formatDate(new Date(pack.updated))}</TableCell>\r\n                            <TableCell align='center'>{formatDate(new Date(pack.created))}</TableCell>\r\n                            <TableCell align='center'>\r\n                                {\r\n                                    userId === pack.user_id\r\n                                        ? <div>\r\n                                            <Button onClick={() => {\r\n                                            }}\r\n                                            >Learn</Button>\r\n                                            <Button onClick={() => setModal(true)}>Edit</Button>\r\n                                            <Modal visible={modal} setVisible={setModal}>\r\n                                                <EditItemForm onEditClick={onEditClick}\r\n                                                              buttonTitle='Update pack'\r\n                                                              setVisible={setModal}\r\n                                                              pack_id={pack._id}\r\n                                                              name={pack.name}\r\n                                                />\r\n                                            </Modal>\r\n                                            <Button onClick={() => onDeleteClick(pack._id)}\r\n                                                    color='secondary'\r\n                                            >Delete</Button>\r\n\r\n                                        </div>\r\n                                        : <Button onClick={() => history.push('/learn/' + pack._id)}>Learn</Button>\r\n                                }\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n","import React, {ChangeEvent, DetailedHTMLProps, FC, SelectHTMLAttributes} from 'react';\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\r\n\r\ntype MySelectPropsType = DefaultSelectPropsType & {\r\n    options: Array<{ value: string, name: string }>;\r\n    onChange: (event: ChangeEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nconst MySelect: FC<MySelectPropsType> = ({options, defaultValue, value, onChange}, ...restProps) => {\r\n\r\n    return (\r\n        <select value={value}\r\n                onChange={onChange}\r\n        >\r\n            <option disabled value=''>{defaultValue}</option>\r\n            {\r\n                options.map(o => <option value={o.value} key={o.value}>\r\n                    {o.name}\r\n                </option>)\r\n            }\r\n        </select>\r\n    );\r\n};\r\n\r\nexport default MySelect;\r\n","import React, {ChangeEvent} from 'react'\r\nimport {Pagination} from '@material-ui/lab'\r\nimport MySelect from '../common/select/MySelect'\r\nimport s from './PaginationBar.module.css'\r\nimport {RequestStatusType} from '../../store/reducers/app/types';\r\n\r\ntype PaginationBarPropsType = {\r\n    page?: number\r\n    pageCount: number\r\n    packsTotal: number\r\n    handlePageChange: (e: React.ChangeEvent<unknown>, value: number) => void\r\n    handlePageCountChange: (e: ChangeEvent<HTMLSelectElement>) => void\r\n    status: RequestStatusType\r\n}\r\n\r\nconst PaginationBar: React.FC<PaginationBarPropsType> = ({\r\n                                                             page,\r\n                                                             pageCount,\r\n                                                             packsTotal,\r\n                                                             handlePageChange,\r\n                                                             handlePageCountChange,\r\n                                                             status\r\n                                                         }) => {\r\n    const options = [\r\n        {value: '10', name: '10'},\r\n        {value: '15', name: '15'},\r\n        {value: '20', name: '20'},\r\n    ]\r\n    const totalPages = Math.ceil(packsTotal / pageCount)\r\n    return (\r\n        <div className={s.paginationBar}>\r\n            <Pagination count={totalPages}\r\n                        variant='outlined'\r\n                        color='primary'\r\n                        page={page}\r\n                        onChange={handlePageChange}\r\n                        disabled={status === 'loading'}\r\n            />\r\n            <MySelect options={options}\r\n                      defaultValue='Packs on page'\r\n                      onChange={handlePageCountChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PaginationBar;\r\n","import React, {useState} from 'react'\r\nimport {Button, TextField} from '@material-ui/core'\r\nimport s from './AddNewItemForm.module.css'\r\n\r\ntype AddItemPropsType = {\r\n    onClick: (title: string) => void\r\n    setVisible: (visible: boolean) => void\r\n    buttonTitle: string\r\n}\r\n\r\nconst AddNewItemForm: React.FC<AddItemPropsType> = ({onClick, buttonTitle, setVisible}) => {\r\n    const [title, setTitle] = useState<string>('');\r\n    return (\r\n        <form className={s.form}>\r\n            <TextField onChange={event => setTitle(event.currentTarget.value)}\r\n                       placeholder='Title'\r\n                       value={title}\r\n            />\r\n            <div className={s.button}>\r\n                <Button onClick={() => {\r\n                    onClick(title)\r\n                    setVisible(false)\r\n                    setTitle('')\r\n                }}\r\n                        color='primary'\r\n                        variant='outlined'\r\n                        size='medium'\r\n                        className={s.button}\r\n                        disabled={title.length < 1}\r\n                >{buttonTitle}</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddNewItemForm;\r\n","import React, {ChangeEvent} from 'react'\r\nimport {Button, Container, Grid, Paper, TextField} from '@material-ui/core'\r\nimport s from './Packs.module.css'\r\nimport {PacksTable} from './PacksTable'\r\nimport {RequestStatusType} from '../../store/reducers/app/types'\r\nimport PaginationBar from '../Pagination/PaginationBar'\r\nimport Modal from '../modals/Modal';\r\nimport AddNewItemForm from '../forms/add-new-item-form/AddNewItemForm';\r\nimport {IPack} from '../../models/IPack';\r\nimport {IUser} from '../../models/IUser';\r\nimport {GetPacksQueryParams, PackPayload} from '../../store/reducers/packs/types';\r\nimport {Search} from '@material-ui/icons';\r\n\r\ntype CardsPacksPropsType = {\r\n    packs: IPack[];\r\n    packsTotal: number;\r\n    queryParams: GetPacksQueryParams;\r\n    user: IUser;\r\n    status: RequestStatusType;\r\n    isMine: boolean;\r\n    handlePageChange: (e: React.ChangeEvent<unknown>, value: number) => void;\r\n    handlePageCountChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    handleCreatePack: (title: string) => void;\r\n    handleDeletePack: (id: string) => void;\r\n    handleEditPack: (payload: PackPayload) => void;\r\n    handleSearch: (e: ChangeEvent<HTMLInputElement>) => void;\r\n    newPackTitle: string;\r\n    setNewPackTitle: (newPackTitle: string) => void;\r\n    setIsMine: (isMine: boolean) => void;\r\n    filter: string;\r\n    visible: boolean;\r\n    setVisible: (visible: boolean) => void;\r\n    onSearchClick: () => void;\r\n}\r\n\r\nconst Packs: React.FC<CardsPacksPropsType> = ({\r\n                                                  queryParams,\r\n                                                  user,\r\n                                                  status,\r\n                                                  isMine,\r\n                                                  setIsMine,\r\n                                                  handlePageChange,\r\n                                                  handlePageCountChange,\r\n                                                  handleCreatePack,\r\n                                                  handleSearch,\r\n                                                  handleDeletePack,\r\n                                                  handleEditPack,\r\n                                                  packs,\r\n                                                  packsTotal,\r\n                                                  filter,\r\n                                                  visible,\r\n                                                  setVisible,\r\n                                                  onSearchClick\r\n                                              }) => {\r\n    return (\r\n        <Paper>\r\n            <Grid container className={s.content}>\r\n                <Grid item xs={3} className={s.settings}>\r\n                    <div>\r\n                        <h5>Show Card Packs</h5>\r\n                        {\r\n                            isMine\r\n                                ? <Button\r\n                                    color='secondary'\r\n                                    variant='contained'\r\n                                    disabled={status === 'loading'}\r\n                                    onClick={() => setIsMine(false)}\r\n                                >Show All Packs</Button>\r\n                                : <Button color='primary'\r\n                                          variant='contained'\r\n                                          disabled={status === 'loading'}\r\n                                          onClick={() => setIsMine(true)}\r\n                                >Show My Packs</Button>\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h5>Number Of Cards</h5>\r\n                        {/*<DoubleSlider/>*/}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={9} className={s.packList}>\r\n                    <h3>Packs List ({packsTotal})</h3>\r\n                    <div className={s.searchBar}>\r\n                        <TextField id='standard-search'\r\n                                   label='Search'\r\n                                   type='search'\r\n                                   variant='outlined'\r\n                                   size='small'\r\n                                   value={filter}\r\n                                   onChange={handleSearch}\r\n                        />\r\n                        <Button onClick={onSearchClick}\r\n                                color='primary'\r\n                                variant={'outlined'}\r\n                                className={s.searchButton}\r\n                        ><Search/></Button>\r\n                        <Button variant='contained'\r\n                                color='primary'\r\n                                size='large'\r\n                                onClick={() => setVisible(true)}\r\n                                disabled={status === 'loading'}\r\n                        >Add Pack</Button>\r\n                        <Modal visible={visible}\r\n                               setVisible={setVisible}\r\n                        >\r\n                            <AddNewItemForm buttonTitle='Create pack'\r\n                                            onClick={handleCreatePack}\r\n                                            setVisible={setVisible}\r\n                            />\r\n                        </Modal>\r\n                    </div>\r\n                    <PacksTable packs={packs}\r\n                                userId={user?._id}\r\n                                onDeleteClick={handleDeletePack}\r\n                                onEditClick={handleEditPack}\r\n                                visible={visible}\r\n                                setVisible={setVisible}\r\n                    />\r\n                    <PaginationBar page={queryParams.page}\r\n                                   pageCount={queryParams.pageCount}\r\n                                   packsTotal={packsTotal}\r\n                                   handlePageChange={handlePageChange}\r\n                                   handlePageCountChange={handlePageCountChange}\r\n                                   status={status}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default Packs;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport Packs from './Packs';\r\nimport {Redirect} from 'react-router';\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport {useActions} from '../../hooks/useActions';\r\nimport {PackPayload} from '../../store/reducers/packs/types';\r\nimport {RouteNames} from '../../router';\r\n\r\nconst PacksContainer = () => {\r\n    const [isMine, setIsMine] = useState(false);\r\n    const [newPackTitle, setNewPackTitle] = useState<string>('');\r\n    const [visible, setVisible] = useState<boolean>(false);\r\n    const [filter, setFilter] = useState<string>('');\r\n\r\n    const status = useAppSelector(state => state.app.status);\r\n    const {user, isAuth} = useAppSelector(state => state.auth);\r\n    const {packs, cardPacksTotalCount, page, pageCount, maxCardsCount, minCardsCount} =\r\n        useAppSelector(state => state.packs);\r\n    const queryParams = {page, pageCount, maxCardsCount, minCardsCount};\r\n    const {fetchPacks, setPage, setPageCount, addPack, removePack, updatePack} = useActions();\r\n\r\n    const getPacks = (isMine: boolean, id?: string, filter?: string) => {\r\n        if (isMine && id) {\r\n            fetchPacks({...queryParams, user_id: id, packName: filter});\r\n        } else {\r\n            fetchPacks({...queryParams, packName: filter});\r\n        }\r\n    };\r\n    const handlePageChange = (e: React.ChangeEvent<unknown>, value: number) => setPage(value);\r\n    const handlePageCountChange = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        setPageCount(+e.currentTarget.value);\r\n    }\r\n    const handleSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setFilter(e.currentTarget.value);\r\n    };\r\n    const handleOnSearchClick = () => getPacks(isMine, user._id, filter);\r\n    const handleCreatePack = async (title: string) => {\r\n        await addPack({name: title});\r\n        getPacks(isMine, user._id, filter);\r\n    };\r\n    const handleDeletePack = async (id: string) => {\r\n        await removePack(id);\r\n        getPacks(isMine, user._id, filter);\r\n    };\r\n    const handleEditPack = async (payload: PackPayload) => {\r\n        await updatePack({name: payload.name, _id: payload._id})\r\n        getPacks(isMine, user._id, filter);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        getPacks(isMine, user._id, filter);\r\n    }, [page, isMine, pageCount]);\r\n\r\n    return (\r\n        <Packs packs={packs}\r\n               packsTotal={cardPacksTotalCount}\r\n               queryParams={queryParams}\r\n               user={user}\r\n               status={status}\r\n               isMine={isMine}\r\n               handlePageChange={handlePageChange}\r\n               handlePageCountChange={handlePageCountChange}\r\n               handleSearch={handleSearch}\r\n               onSearchClick={handleOnSearchClick}\r\n               handleCreatePack={handleCreatePack}\r\n               handleEditPack={handleEditPack}\r\n               handleDeletePack={handleDeletePack}\r\n               newPackTitle={newPackTitle}\r\n               setNewPackTitle={setNewPackTitle}\r\n               setIsMine={setIsMine}\r\n               filter={filter}\r\n               visible={visible}\r\n               setVisible={setVisible}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PacksContainer;\r\n","import React from 'react'\r\nimport PacksContainer from '../components/Packs/PacksContainer'\r\n\r\nconst Packs = () => {\r\n    return (\r\n        <div className='packsPage'>\r\n            <PacksContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packs;\r\n","import React, {FC} from 'react';\r\nimport {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from '@material-ui/core';\r\nimport s from '../Packs/PacksTable.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {RouteNames} from '../../router';\r\nimport {formatDate} from '../../utils/date';\r\nimport {ICard} from '../../models/ICard';\r\n\r\ntype CardTablePropsType = {\r\n    cards: ICard[]\r\n}\r\n\r\nconst CardTable: FC<CardTablePropsType> = ({cards}) => {\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label='card table'>\r\n                <TableHead className={s.tableHead}>\r\n                    <TableRow>\r\n                        <TableCell>Title</TableCell>\r\n                        <TableCell align='center'>Question</TableCell>\r\n                        <TableCell align='center'>Answer</TableCell>\r\n                        <TableCell align='center'>Last Updated</TableCell>\r\n                        <TableCell align='center'>Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {cards.map((card) => (\r\n                        <TableRow key={card._id}>\r\n                            <TableCell component='th' scope='row'>\r\n                                <NavLink to={RouteNames.PACKS + `/${card._id}`}>{card.question}</NavLink>\r\n                            </TableCell>\r\n                            <TableCell align='center'>{card.answer}</TableCell>\r\n                            <TableCell align='center'>{formatDate (new Date(card.updated))}</TableCell>\r\n                            <TableCell align='center'>\r\n                                <div>\r\n                                    <Button onClick={() => {}}>Edit</Button>\r\n                                    <Button onClick={() => {}}\r\n                                            color='secondary'\r\n                                    >Delete</Button>\r\n                                </div>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default CardTable;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Button, Container, Paper, TextField} from '@material-ui/core';\r\nimport s from '../Packs/Packs.module.css';\r\nimport {Search} from '@material-ui/icons';\r\nimport Modal from '../modals/Modal';\r\nimport AddNewItemForm from '../forms/add-new-item-form/AddNewItemForm';\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport {useActions} from '../../hooks/useActions';\r\nimport {useParams} from 'react-router';\r\nimport CardTable from './CardTable';\r\n\r\nconst Cards = () => {\r\n    const [filter, setFilter] = useState<string>('');\r\n    const {cardsTotalCount, cards} = useAppSelector(state => state.cards);\r\n    const {packs} = useAppSelector(state => state.packs);\r\n    const {status} = useAppSelector(state => state.app);\r\n    const {isAuth} = useAppSelector(state => state.auth);\r\n    const {fetchCards, addCard, authMe} = useActions();\r\n    const {id} = useParams<{ id: string }>();\r\n    let packName;\r\n    packs.forEach(p => {\r\n        if (p._id === id) {\r\n            packName = p.name\r\n        }\r\n    })\r\n\r\n    const onSearchClick = () => {\r\n        fetchCards({cardsPack_id: id});\r\n    };\r\n    const handleCreateCard = async (title: string) => {\r\n        await addCard({cardsPack_id: id});\r\n        fetchCards({cardsPack_id: id});\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            authMe();\r\n        }\r\n        fetchCards({cardsPack_id: id});\r\n    },[])\r\n\r\n    return (\r\n        <Container>\r\n            <Paper>\r\n                <h3>{`${packName} (${cardsTotalCount})`}</h3>\r\n                <div className={s.searchBar}>\r\n                    <TextField id='standard-search'\r\n                               label='Search'\r\n                               type='search'\r\n                               variant='outlined'\r\n                               size='small'\r\n                               value={filter}\r\n                               onChange={e => setFilter(e.currentTarget.value)}\r\n                    />\r\n                    <Button onClick={onSearchClick}\r\n                            color='primary'\r\n                            variant={'outlined'}\r\n                            className={s.searchButton}\r\n                    ><Search/></Button>\r\n                    <Button variant='contained'\r\n                            color='primary'\r\n                            size='large'\r\n                            onClick={() => {\r\n                            }}\r\n                            disabled={status === 'loading'}\r\n                    >Add Pack</Button>\r\n                    <Modal visible={false}\r\n                           setVisible={() => {\r\n                           }}\r\n                    >\r\n                        <AddNewItemForm buttonTitle='Create card'\r\n                                        onClick={handleCreateCard}\r\n                                        setVisible={() => {\r\n                                        }}\r\n                        />\r\n                    </Modal>\r\n                </div>\r\n                <CardTable cards={cards}/>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Card, CardActions, CardContent, CardMedia, Paper, Typography} from '@material-ui/core';\r\nimport {ICard} from '../models/ICard';\r\nimport {useAppSelector} from '../hooks/useAppSelector';\r\nimport {useHistory, useParams} from 'react-router';\r\nimport {useActions} from '../hooks/useActions';\r\nimport {RouteNames} from '../router';\r\nconst grades = ['Didn`t know', 'Forgot', 'Too much thinking', 'Confused', 'Got it'];\r\n\r\nconst getCard = (cards: ICard[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n    return cards[res.id + 1];\r\n};\r\n\r\nconst Learn: FC = () => {\r\n    const [card, setCard] = useState<ICard>({\r\n        _id: 'fake',\r\n        cardsPack_id: '',\r\n\r\n        answer: 'answer fake',\r\n        question: 'question fake',\r\n        grade: 0,\r\n        shots: 0,\r\n        answerImg: 'url or base 64',\r\n        questionImg: 'url or base 64',\r\n        questionVideo: 'url or base 64',\r\n        answerVideo: 'url or base 64',\r\n        type: '',\r\n        rating: 0,\r\n        more_id: '',\r\n\r\n        created: '',\r\n        updated: '',\r\n    });\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    const [isChecked, setIsChecked] = useState<boolean>(false);\r\n    const {cards} = useAppSelector(state => state.cards);\r\n    const {id} = useParams<{ id: string }>();\r\n    const {fetchCards} = useActions();\r\n    const {packs} = useAppSelector(state => state.packs);\r\n    const pack = packs.find(p => p._id === id)\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            fetchCards({cardsPack_id: id});\r\n            setFirst(false);\r\n        }\r\n\r\n        if (cards.length > 0) setCard(getCard(cards));\r\n    }, [id, cards, first]);\r\n\r\n    const onNext = () => {\r\n        setIsChecked(false);\r\n\r\n        if (cards.length > 0) {\r\n            setCard(getCard(cards));\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translateX(-50%) translateY(-50%)',\r\n            width: '450px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center'\r\n        }}>\r\n            <div style={{display: 'flex'}}>\r\n                <Button onClick={() => history.push(RouteNames.PACKS)}\r\n                >Back</Button>\r\n                <h3>You are learning {pack?.name}</h3>\r\n            </div>\r\n            <CardContent>\r\n                {\r\n                    card.questionImg && <CardMedia\r\n                        component='img'\r\n                        height='194'\r\n                        image={card.questionImg}\r\n                        alt='Question image'\r\n                    />\r\n                }\r\n                <Typography variant='body2'>\r\n                    {card.question}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <div>\r\n                    <Button onClick={() => setIsChecked(true)}>check</Button>\r\n                </div>\r\n            </CardActions>\r\n            {isChecked && (\r\n                <>\r\n                    <Paper style={{margin: 10, padding:10}}>\r\n                        {\r\n                            card.answerImg && <CardMedia\r\n                                component='img'\r\n                                height='194'\r\n                                image={card.answerImg}\r\n                                alt='Answer image'\r\n                            />\r\n                        }\r\n                        {card.answer}\r\n                    </Paper>\r\n                    <div style={{\r\n                        marginTop: 10,\r\n                        display: 'flex',\r\n                        flexWrap: 'wrap',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        {grades.map((g, i) => (\r\n                            <div style={{margin: 5}}>\r\n                                <Button variant='outlined'\r\n                                        key={'grade-' + i}\r\n                                        onClick={() => {\r\n                                        }}>{g}</Button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div style={{margin: 20}}><Button\r\n                        color='primary'\r\n                        variant='contained'\r\n                        onClick={onNext}\r\n                    >next</Button></div>\r\n                </>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Learn;\r\n\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router';\r\nimport {privateRoutes, publicRoutes, RouteNames} from '../router';\r\nimport {useAppSelector} from '../hooks/useAppSelector';\r\n\r\nconst AppRouter = () => {\r\n    const {isAuth} = useAppSelector(state => state.auth)\r\n    return (\r\n        !isAuth ?\r\n            <Switch>\r\n                {publicRoutes.map(r =>\r\n                    <Route component={r.component}\r\n                           path={r.path}\r\n                           exact={r.exact}\r\n                           key={r.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.LOGIN}/>\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                {privateRoutes.map(r =>\r\n                    <Route component={r.component}\r\n                           path={r.path}\r\n                           exact={r.exact}\r\n                           key={r.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.PACKS}/>\r\n            </Switch>\r\n    )\r\n}\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport {Alert} from '@material-ui/lab';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Snackbar} from '@material-ui/core';\r\nimport {useAppSelector} from '../../../hooks/useAppSelector';\r\nimport {useActions} from '../../../hooks/useActions';\r\n\r\nconst ErrorBar = () => {\r\n    const dispatch = useDispatch();\r\n    const error = useAppSelector<string | null>(state => state.app.error);\r\n    const {setAppError} = useActions();\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError(''));\r\n    }\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert variant='outlined' severity='error'>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n\r\nexport default ErrorBar\r\n","import {AppBar, Button, Toolbar, Typography} from '@material-ui/core';\r\nimport React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {useAppSelector} from '../../hooks/useAppSelector';\r\nimport {useActions} from '../../hooks/useActions';\r\n\r\nconst Navbar = () => {\r\n    const {isAuth} = useAppSelector(state => state.auth);\r\n    const {status} = useAppSelector(state => state.app);\r\n    const {logout} = useActions();\r\n    return (\r\n        <AppBar position='static'>\r\n            <Toolbar className={s.toolbar}>\r\n                <Typography variant='h6' className={s.text}>\r\n                    Learn whatever you need using spaced-repetition technique...\r\n                </Typography>\r\n                {\r\n                    isAuth &&\r\n                    <Button color='inherit'\r\n                            onClick={() => logout()}\r\n                            disabled={status === 'loading'}\r\n                    >Sign Out</Button>\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, {useEffect} from 'react';\nimport AppRouter from './components/AppRouter';\nimport './styles/App.css';\nimport {CircularProgress, Container, LinearProgress} from '@material-ui/core';\nimport ErrorBar from './components/common/error-bar/ErrorBar';\nimport Navbar from './components/Navbar/Navbar';\nimport {useAppSelector} from './hooks/useAppSelector';\nimport {useActions} from './hooks/useActions';\n\nconst App = () => {\n    const {isInitialized, status, error} = useAppSelector(state => state.app);\n    const {initializeApp} = useActions();\n\n    useEffect(() => {\n        initializeApp();\n    }, []);\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '40%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n    return (\n        <div className='app'>\n            <Navbar/>\n            {status === 'loading' && <LinearProgress/>}\n            <Container fixed className='container'>\n                <AppRouter/>\n                {error && <ErrorBar/>}\n            </Container>\n\n        </div>\n    );\n};\n\nexport default App\n","import {AuthAction, AuthActionEnum, AuthState} from './types';\r\nimport {IUser} from '../../../models/IUser';\r\n\r\nconst initialState: AuthState = {\r\n    user: {} as IUser,\r\n    isAuth: false,\r\n    info: '',\r\n};\r\n\r\nconst authReducer = (state = initialState, action: AuthAction): AuthState => {\r\n    switch (action.type) {\r\n        case AuthActionEnum.SET_USER_DATA:\r\n            return {...state, user: action.payload};\r\n        case AuthActionEnum.SET_IS_AUTH:\r\n            return {...state, isAuth: action.payload};\r\n        case AuthActionEnum.SET_INFO:\r\n            return {...state, info: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// const authMe = (): AppThunkType => async (dispatch) => {\r\n//     dispatch(setAppStatus('loading'))\r\n//     try {\r\n//         const data = await authAPI.authMe()\r\n//         dispatch(setUserData(data))\r\n//         dispatch(setIsAuth(true))\r\n//         dispatch(setAppStatus('succeed'))\r\n//         localStorage.setItem('auth', 'true')\r\n//         if (!data) {\r\n//             setAppError('No internet connection!')\r\n//         }\r\n//     } catch (e) {\r\n//         dispatch(setAppError(e.response.data.error))\r\n//         dispatch(setAppStatus('failed'))\r\n//     }\r\n// }\r\n// const register = (payload: RegisterPayloadType): AppThunkType => async (dispatch) => {\r\n//     dispatch(setAppStatus('loading'))\r\n//     try {\r\n//         const data = await authAPI.register(payload)\r\n//         dispatch(setIsRegistered(true))\r\n//         dispatch(setAppStatus('succeed'))\r\n//     } catch (e) {\r\n//         dispatch(setAppError(e.response.data.error))\r\n//         dispatch(setAppStatus('failed'))\r\n//     }\r\n// }\r\n// const restorePassword = (payload: { email: string }): AppThunkType => async (dispatch) => {\r\n//     dispatch(setAppStatus('loading'))\r\n//     try {\r\n//         const data = await authAPI.restorePassword(payload)\r\n//         dispatch(setAuthInfo(data.info))\r\n//         dispatch(setAppStatus('succeed'))\r\n//     } catch (e) {\r\n//         dispatch(setAppError(e.response.data.error))\r\n//         dispatch(setAppStatus('failed'))\r\n//     }\r\n// }\r\n\r\nexport default authReducer;\r\n","import {PacksAction, PacksActions, PacksState} from './types';\r\n\r\nconst initState: PacksState = {\r\n    packs: [],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    filter: '',\r\n}\r\n\r\nconst packsReducer = (state = initState, action: PacksAction): PacksState => {\r\n    switch (action.type) {\r\n        case PacksActions.SET_PACKS:\r\n            return {...state, packs: action.payload};\r\n        case PacksActions.SET_PAGE_COUNT:\r\n            return {...state, pageCount: action.payload};\r\n        case PacksActions.SET_PAGE:\r\n            return {...state, page: action.payload};\r\n        case PacksActions.SET_PACKS_TOTAL_COUNT:\r\n            return {...state, cardPacksTotalCount: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default packsReducer;\r\n","import {AppAction, AppActionEnum, AppState} from './types';\r\n\r\nconst initialState: AppState = {\r\n    isInitialized: false,\r\n    status: 'idle',\r\n    error: ''\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppAction): AppState => {\r\n    switch (action.type) {\r\n        case AppActionEnum.SET_APP_IS_INITIALIZED:\r\n            return {...state, isInitialized: action.payload};\r\n        case AppActionEnum.SET_APP_STATUS:\r\n            return {...state, status: action.payload};\r\n        case AppActionEnum.SET_APP_ERROR:\r\n            return {...state, error: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appReducer;\r\n","import {CardsAction, CardsActions, CardsState} from './types';\r\n\r\nconst initState: CardsState = {\r\n    cards: [],\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    packUserId: ''\r\n}\r\n\r\nconst cardsReducer = (state = initState, action: CardsAction): CardsState => {\r\n    switch (action.type) {\r\n        case CardsActions.SET_CARDS:\r\n            return {...state, cards: action.payload};\r\n        case CardsActions.SET_CARDS_PAGE_COUNT:\r\n            return {...state, pageCount: action.payload};\r\n        case CardsActions.SET_CARDS_PAGE:\r\n            return {...state, page: action.payload};\r\n        case CardsActions.SET_CARDS_TOTAL_COUNT:\r\n            return {...state, cardsTotalCount: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default cardsReducer;\r\n","import {combineReducers} from 'redux';\r\nimport authReducer from './auth';\r\nimport packsReducer from './packs';\r\nimport appReducer from './app';\r\nimport cardsReducer from './cards';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport {\r\n    rootReducer\r\n};\r\n","import {applyMiddleware, compose, createStore} from '@reduxjs/toolkit';\r\nimport {rootReducer} from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport {\r\n    store,\r\n};\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n","import {createTheme} from '@material-ui/core';\r\n\r\nexport const theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main:'#673ab7'\r\n        }\r\n    },\r\n    typography: {\r\n        fontFamily: 'Comic Sans MS'\r\n    }\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './store';\nimport {BrowserRouter} from 'react-router-dom';\nimport {MuiThemeProvider} from '@material-ui/core';\nimport {theme} from './styles/theme';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <MuiThemeProvider theme={theme}>\n                <App />\n            </MuiThemeProvider>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"RegisterForm_paper__3Wx1k\",\"form\":\"RegisterForm_form__1YA2d\",\"formGroup\":\"RegisterForm_formGroup__1eES6\",\"formLabel\":\"RegisterForm_formLabel__37OlO\",\"icon1\":\"RegisterForm_icon1__1wcWh\",\"icon2\":\"RegisterForm_icon2__66SOW\",\"buttonBlock\":\"RegisterForm_buttonBlock__64Uln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Packs_container__3QEoA\",\"content\":\"Packs_content__34QFM\",\"settings\":\"Packs_settings__3KbNR\",\"packList\":\"Packs_packList__1X3n7\",\"searchBar\":\"Packs_searchBar__2s8DB\",\"searchButton\":\"Packs_searchButton__2E5mR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"LoginForm_paper__3qGfh\",\"form\":\"LoginForm_form__36SWb\",\"formGroup\":\"LoginForm_formGroup__24Z5-\",\"formLabel\":\"LoginForm_formLabel__2tMXa\",\"button\":\"LoginForm_button__10zpS\",\"signUpBlock\":\"LoginForm_signUpBlock__3FZ3k\",\"icon\":\"LoginForm_icon__2DjGk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"RestorePassword_paper__3g9s6\",\"form\":\"RestorePassword_form__3pASA\",\"formLabel\":\"RestorePassword_formLabel__1lduY\",\"formGroup\":\"RestorePassword_formGroup__wDP9u\",\"button\":\"RestorePassword_button__3b3Qc\",\"text\":\"RestorePassword_text__2qVmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"SetPassword_paper__1u1ul\",\"formGroup\":\"SetPassword_formGroup__3sxZV\",\"buttonBlock\":\"SetPassword_buttonBlock__MuX-h\",\"text\":\"SetPassword_text__aFHGH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableHead\":\"PacksTable_tableHead__3JSVF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myModal\":\"Modal_myModal__rClbI\",\"active\":\"Modal_active__2oSel\",\"myModalContent\":\"Modal_myModalContent__3gByB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"EditItemForm_form__1NRfs\",\"button\":\"EditItemForm_button__2YKM0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddNewItemForm_form__31JIw\",\"button\":\"AddNewItemForm_button__3ZDS9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"Navbar_toolbar__2QZCs\"};"],"sourceRoot":""}